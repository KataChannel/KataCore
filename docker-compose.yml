services:
  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
      args:
        NODE_ENV: production
        # Pass build-time environment variables
        DATABASE_URL: ${DATABASE_URL}
    image: tazacore/api:${API_VERSION}
    container_name: tazacore-api
    restart: ${RESTART_POLICY}
    ports:
      - "${API_PORT}:3001"
    environment:
      NODE_ENV: production
      API_PORT: 3001
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PORT: ${MINIO_PORT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_USE_SSL: ${MINIO_USE_SSL}
      # Prisma-specific configurations
      PRISMA_QUERY_ENGINE_LIBRARY: /app/shared/node_modules/.prisma/client/libquery_engine-linux-musl-openssl-3.0.x.so.node
    networks:
      - tazacore-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    volumes:
      - api_logs:/app/logs
      # Mount shared directory for runtime access
      - ./shared:/app/shared:ro
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"

  site:
    build:
      context: .
      dockerfile: ./site/Dockerfile
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        NEXT_PUBLIC_MINIO_ENDPOINT: ${NEXT_PUBLIC_MINIO_ENDPOINT}
    image: tazacore/site:${SITE_VERSION}
    container_name: tazacore-site
    restart: ${RESTART_POLICY}
    ports:
      - "${SITE_PORT}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_MINIO_ENDPOINT: ${NEXT_PUBLIC_MINIO_ENDPOINT}
      INTERNAL_API_URL: ${INTERNAL_API_URL}
      # Database connection for API routes
      DATABASE_URL: ${DATABASE_URL}
    networks:
      - tazacore-network
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    volumes:
      # Mount shared directory for runtime access
      - ./shared:/app/shared:ro
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"

  postgres:
    image: postgres:15-alpine
    container_name: tazacore-postgres
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    networks:
      - tazacore-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: tazacore-redis
    restart: ${RESTART_POLICY:-unless-stopped}
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    networks:
      - tazacore-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"

  minio:
    image: minio/minio:latest
    container_name: tazacore-minio
    restart: ${RESTART_POLICY}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - tazacore-network
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tazacore-pgadmin
    restart: ${RESTART_POLICY}
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    networks:
      - tazacore-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"

networks:
  tazacore-network:
    driver: bridge
    name: tazacore-network

volumes:
  postgres_data:
    name: tazacore-postgres-data
  redis_data:
    name: tazacore-redis-data
  minio_data:
    name: tazacore-minio-data
  pgadmin_data:
    name: tazacore-pgadmin-data
  api_logs:
    name: tazacore-api-logs
