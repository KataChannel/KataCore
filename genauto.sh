#!/bin/bash

# üîê KataCore Auto-Generated Security Script
# T·∫°o c√°c m·∫≠t kh·∫©u v√† secrets b·∫£o m·∫≠t t·ª± ƒë·ªông

set -euo pipefail

# Color codes
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m'

# Unicode symbols
readonly CHECK="‚úÖ"
readonly CROSS="‚ùå"
readonly INFO="‚ÑπÔ∏è"
readonly WARNING="‚ö†Ô∏è"
readonly ROCKET="üöÄ"
readonly LOCK="üîê"
readonly KEY="üîë"
readonly FOLDER="üìÅ"
readonly SHIELD="üõ°Ô∏è"

# Default options
CREATE_ENV=false
CREATE_SSH=false
SHOW_HELP=false

# Logging functions
log() { echo -e "${CYAN}[$(date +'%H:%M:%S')]${NC} $1"; }
info() { echo -e "${BLUE}${INFO} $1${NC}"; }
success() { echo -e "${GREEN}${CHECK} $1${NC}"; }
warning() { echo -e "${YELLOW}${WARNING} $1${NC}"; }
error() { echo -e "${RED}${CROSS} $1${NC}"; exit 1; }

# Show help
show_help() {
    echo -e "${BLUE}S·ª≠ d·ª•ng: $0 [OPTIONS]${NC}"
    echo
    echo -e "${YELLOW}T√πy ch·ªçn:${NC}"
    echo -e "  ${GREEN}--env${NC}      T·∫°o file .env.local"
    echo -e "  ${GREEN}--ssh${NC}      T·∫°o SSH keys"
    echo -e "  ${GREEN}--all${NC}      T·∫°o c·∫£ env v√† SSH keys"
    echo -e "  ${GREEN}--help${NC}     Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y"
    echo
    echo -e "${YELLOW}V√≠ d·ª•:${NC}"
    echo -e "  $0 --env           # Ch·ªâ t·∫°o .env.local"
    echo -e "  $0 --ssh           # Ch·ªâ t·∫°o SSH keys"
    echo -e "  $0 --all           # T·∫°o c·∫£ hai"
    echo
}

# Parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --env)
                CREATE_ENV=true
                shift
                ;;
            --ssh)
                CREATE_SSH=true
                shift
                ;;
            --all)
                CREATE_ENV=true
                CREATE_SSH=true
                shift
                ;;
            --help|-h)
                SHOW_HELP=true
                shift
                ;;
            *)
                warning "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # If no options provided, show interactive menu
    if [[ "$CREATE_ENV" == false && "$CREATE_SSH" == false && "$SHOW_HELP" == false ]]; then
        show_interactive_menu
    fi
}

# Interactive menu
show_interactive_menu() {
    clear
    echo -e "${BLUE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üîê KATACORE SECURITY GENERATOR                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    echo
    echo -e "${YELLOW}Ch·ªçn nh·ªØng g√¨ b·∫°n mu·ªën t·∫°o:${NC}"
    echo
    echo -e "  ${GREEN}1)${NC} T·∫°o file .env.local"
    echo -e "  ${GREEN}2)${NC} T·∫°o SSH keys"
    echo -e "  ${GREEN}3)${NC} T·∫°o c·∫£ hai"
    echo -e "  ${GREEN}4)${NC} Tho√°t"
    echo
    read -p "Nh·∫≠p l·ª±a ch·ªçn (1-4): " choice
    
    case $choice in
        1)
            CREATE_ENV=true
            ;;
        2)
            CREATE_SSH=true
            ;;
        3)
            CREATE_ENV=true
            CREATE_SSH=true
            ;;
        4)
            echo -e "${CYAN}T·∫°m bi·ªát!${NC}"
            exit 0
            ;;
        *)
            warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
            show_interactive_menu
            ;;
    esac
}

# Generate secure password
generate_password() {
    local length=${1:-32}
    openssl rand -base64 $((length * 3 / 4)) | tr -d "=+/\n" | cut -c1-$length
}

# Generate JWT secret
generate_jwt_secret() {
    openssl rand -base64 64 | tr -d "\n"
}

# Get SSH key parameters from user
get_ssh_params() {
    echo
    echo -e "${BLUE}${KEY} C·∫•u h√¨nh SSH Key${NC}"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # Key name
    echo -e "${YELLOW}T√™n key (Enter ƒë·ªÉ s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh):${NC}"
    read -p "T√™n key [katacore_$(date +%Y%m%d)]: " key_name
    key_name=${key_name:-"katacore_$(date +%Y%m%d)"}
    
    # Key type
    echo
    echo -e "${YELLOW}Lo·∫°i key:${NC}"
    echo -e "  ${GREEN}1)${NC} ed25519 (khuy·∫øn ngh·ªã)"
    echo -e "  ${GREEN}2)${NC} rsa 4096"
    echo -e "  ${GREEN}3)${NC} ecdsa 521"
    read -p "Ch·ªçn lo·∫°i key [1]: " key_type_choice
    
    case ${key_type_choice:-1} in
        1)
            key_type="ed25519"
            key_size=""
            ;;
        2)
            key_type="rsa"
            key_size="-b 4096"
            ;;
        3)
            key_type="ecdsa"
            key_size="-b 521"
            ;;
        *)
            key_type="ed25519"
            key_size=""
            ;;
    esac
    
    # Comment
    echo
    echo -e "${YELLOW}Comment cho key (Enter ƒë·ªÉ s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh):${NC}"
    read -p "Comment [katacore@$(hostname)-$(date +%Y%m%d)]: " comment
    comment=${comment:-"katacore@$(hostname)-$(date +%Y%m%d)"}
    
    # Passphrase
    echo
    echo -e "${YELLOW}B·∫°n c√≥ mu·ªën ƒë·∫∑t passphrase cho key? (y/N):${NC}"
    read -p "ƒê·∫∑t passphrase? [N]: " use_passphrase
    
    if [[ "${use_passphrase,,}" == "y" || "${use_passphrase,,}" == "yes" ]]; then
        echo -e "${CYAN}Nh·∫≠p passphrase (·∫©n):${NC}"
        read -s -p "Passphrase: " passphrase
        echo
        read -s -p "X√°c nh·∫≠n passphrase: " passphrase_confirm
        echo
        
        if [[ "$passphrase" != "$passphrase_confirm" ]]; then
            error "Passphrase kh√¥ng kh·ªõp!"
        fi
    else
        passphrase=""
    fi
    
    # Custom path
    echo
    echo -e "${YELLOW}ƒê∆∞·ªùng d·∫´n l∆∞u key (Enter ƒë·ªÉ s·ª≠ d·ª•ng ~/.ssh/):${NC}"
    read -p "ƒê∆∞·ªùng d·∫´n [~/.ssh/]: " custom_path
    ssh_dir=${custom_path:-"$HOME/.ssh"}
    
    # Expand tilde
    ssh_dir="${ssh_dir/#\~/$HOME}"
}

# Create SSH keys
create_ssh_keys() {
    log "Chu·∫©n b·ªã t·∫°o SSH keys..."
    
    # Get parameters from user
    get_ssh_params
    
    echo
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${BLUE}Th√¥ng tin SSH key s·∫Ω t·∫°o:${NC}"
    echo -e "  ${YELLOW}T√™n:${NC} $key_name"
    echo -e "  ${YELLOW}Lo·∫°i:${NC} $key_type"
    echo -e "  ${YELLOW}Comment:${NC} $comment"
    echo -e "  ${YELLOW}ƒê∆∞·ªùng d·∫´n:${NC} $ssh_dir"
    echo -e "  ${YELLOW}Passphrase:${NC} ${passphrase:+'C√≥'}"
    echo
    
    read -p "Ti·∫øp t·ª•c t·∫°o SSH key? (Y/n): " confirm
    if [[ "${confirm,,}" == "n" || "${confirm,,}" == "no" ]]; then
        warning "H·ªßy t·∫°o SSH key"
        return
    fi
    
    log "ƒêang t·∫°o SSH keys..."
    
    local private_key="$ssh_dir/${key_name}"
    local public_key="$ssh_dir/${key_name}.pub"
    
    # Create directory if not exists
    [[ ! -d "$ssh_dir" ]] && mkdir -p "$ssh_dir" && chmod 700 "$ssh_dir"
    
    # Check if key already exists
    if [[ -f "$private_key" ]]; then
        echo
        read -p "Key ƒë√£ t·ªìn t·∫°i. Ghi ƒë√®? (y/N): " overwrite
        if [[ "${overwrite,,}" != "y" && "${overwrite,,}" != "yes" ]]; then
            warning "H·ªßy t·∫°o SSH key"
            return
        fi
    fi
    
    # Generate SSH key pair
    if [[ -n "$passphrase" ]]; then
        ssh-keygen -t "$key_type" $key_size -f "$private_key" -N "$passphrase" -C "$comment" &>/dev/null
    else
        ssh-keygen -t "$key_type" $key_size -f "$private_key" -N "" -C "$comment" &>/dev/null
    fi
    
    chmod 600 "$private_key"
    chmod 644 "$public_key"
    
    success "SSH keys ƒë√£ t·∫°o th√†nh c√¥ng!"
    echo -e "  ${CYAN}Private:${NC} $private_key"
    echo -e "  ${CYAN}Public:${NC}  $public_key"
    echo
    echo -e "${YELLOW}Public key content:${NC}"
    echo -e "${GREEN}$(cat "$public_key")${NC}"
    echo
    
    # Ask to add to ssh-agent
    if command -v ssh-agent &> /dev/null; then
        echo -e "${YELLOW}B·∫°n c√≥ mu·ªën th√™m key v√†o ssh-agent? (Y/n):${NC}"
        read -p "Th√™m v√†o ssh-agent? [Y]: " add_agent
        if [[ "${add_agent,,}" != "n" && "${add_agent,,}" != "no" ]]; then
            if ssh-add "$private_key" 2>/dev/null; then
                success "ƒê√£ th√™m key v√†o ssh-agent"
            else
                warning "Kh√¥ng th·ªÉ th√™m key v√†o ssh-agent (c√≥ th·ªÉ c·∫ßn passphrase)"
            fi
        fi
    fi
}

# Create .env.local file
create_env_file() {
    log "T·∫°o file .env.local..."
    
    # Generate all passwords
    local DB_PASSWORD=$(generate_password 8)
    local REDIS_PASSWORD=$(generate_password 8)
    local JWT_SECRET=$(generate_jwt_secret)
    local ENCRYPTION_KEY=$(generate_password 8)
    local MINIO_ROOT_PASSWORD=$(generate_password 8)
    local MINIO_ACCESS_KEY=$(generate_password 8)
    local PGADMIN_PASSWORD=$(generate_password 8)
    local GRAFANA_PASSWORD=$(generate_password 8)
    
    # Create .env.local file
    cat > .env.local << EOF
# üîê KataCore Auto-Generated Security Configuration
# Generated on: $(date '+%Y-%m-%d %H:%M:%S %Z')
# ===== DATABASE =====
POSTGRES_PASSWORD=$DB_PASSWORD
POSTGRES_DB=katacore
POSTGRES_USER=katacore
DATABASE_URL=postgresql://katacore:$DB_PASSWORD@localhost:5432/katacore

# ===== REDIS =====
REDIS_PASSWORD=$REDIS_PASSWORD
REDIS_URL=redis://:$REDIS_PASSWORD@localhost:6379/0

# ===== MINIO =====
MINIO_ROOT_USER=admin
MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY
MINIO_SECRET_KEY=$MINIO_ROOT_PASSWORD

# ===== SECURITY =====
JWT_SECRET=$JWT_SECRET
ENCRYPTION_KEY=$ENCRYPTION_KEY

# ===== ADMIN TOOLS =====
PGADMIN_DEFAULT_EMAIL=admin@katacore.local
PGADMIN_DEFAULT_PASSWORD=$PGADMIN_PASSWORD
GRAFANA_ADMIN_PASSWORD=$GRAFANA_PASSWORD

# ===== APP CONFIG =====
NODE_ENV=development
API_PORT=3001
NEXT_PUBLIC_API_URL=http://localhost:3001
EOF

    # Add to .gitignore if exists
    if [[ -f .gitignore ]] && ! grep -q ".env.local" .gitignore; then
        echo ".env.local" >> .gitignore
    fi
    
    success ".env.local ƒë√£ t·∫°o ($(wc -l < .env.local) d√≤ng)"
}

# Show final results
show_results() {
    echo
    echo -e "${GREEN}${CHECK} ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}${CHECK} HO√ÄN T·∫§T T·∫†O C·∫§U H√åNH KATACORE${NC}"
    echo -e "${GREEN}${CHECK} ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
    
    if [[ "$CREATE_ENV" == true ]]; then
        echo -e "${BLUE}${FOLDER} File .env.local:${NC} ƒê√£ t·∫°o"
    fi
    
    if [[ "$CREATE_SSH" == true ]]; then
        echo -e "${BLUE}${KEY} SSH Keys:${NC} ƒê√£ t·∫°o"
    fi
    
    echo
    echo -e "${PURPLE}${ROCKET} B∆∞·ªõc ti·∫øp theo:${NC}"
    
    if [[ "$CREATE_ENV" == true ]]; then
        echo -e "  ${YELLOW}‚Ä¢${NC} docker-compose up -d"
        echo -e "  ${YELLOW}‚Ä¢${NC} npm run dev"
    fi
    
    if [[ "$CREATE_SSH" == true ]]; then
        echo -e "  ${YELLOW}‚Ä¢${NC} S·ª≠ d·ª•ng key trong c√°c k·∫øt n·ªëi SSH"
        echo -e "  ${YELLOW}‚Ä¢${NC} Th√™m public key v√†o server/service c·∫ßn thi·∫øt"
    fi
    
    echo
    echo -e "${RED}${WARNING} L∆∞u √Ω: Kh√¥ng commit .env.local v√† private key v√†o git!${NC}"
    echo
}

# Main execution
main() {
    # Parse arguments
    parse_args "$@"
    
    # Show help if requested
    if [[ "$SHOW_HELP" == true ]]; then
        show_help
        exit 0
    fi
    
    # Execute requested operations
    if [[ "$CREATE_SSH" == true ]]; then
        create_ssh_keys
    fi
    
    if [[ "$CREATE_ENV" == true ]]; then
        create_env_file
    fi
    
    # Show final results
    show_results
}

# Run main function
main "$@"
