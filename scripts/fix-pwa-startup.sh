#!/bin/bash

# üöÄ PWA & Startup Optimization Script
# Fixes PWA issues and optimizes startup performance

set -euo pipefail

# Colors
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

log() { echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
error() { echo -e "${RED}‚ùå $1${NC}"; }

show_banner() {
    echo -e "${BLUE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üöÄ PWA & Performance Fix         ‚ïë
‚ïë          TazaCore Optimizer          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

check_dependencies() {
    log "Checking dependencies..."
    
    # Check if next-pwa is installed
    if ! grep -q "next-pwa" site/package.json; then
        warning "next-pwa not found in dependencies"
        info "Installing next-pwa..."
        cd site && bun add next-pwa && cd ..
        success "next-pwa installed"
    else
        success "next-pwa is already installed"
    fi
}

check_pwa_icons() {
    log "Checking PWA icons..."
    
    local icon_dir="site/public/icons"
    local required_icons=(
        "icon-72x72.png"
        "icon-96x96.png"
        "icon-128x128.png"
        "icon-144x144.png"
        "icon-152x152.png"
        "icon-192x192.png"
        "icon-384x384.png"
        "icon-512x512.png"
    )
    
    local missing_icons=()
    
    for icon in "${required_icons[@]}"; do
        if [[ ! -f "$icon_dir/$icon" ]]; then
            missing_icons+=("$icon")
        fi
    done
    
    if [[ ${#missing_icons[@]} -gt 0 ]]; then
        warning "Missing PWA icons: ${missing_icons[*]}"
        info "You may need to generate missing icons"
    else
        success "All PWA icons are present"
    fi
}

check_manifest() {
    log "Checking manifest.json..."
    
    if [[ -f "site/public/manifest.json" ]]; then
        success "manifest.json exists"
        
        # Check if manifest has required fields
        if grep -q '"start_url"' site/public/manifest.json; then
            success "manifest.json has start_url"
        else
            warning "manifest.json missing start_url"
        fi
    else
        error "manifest.json not found"
        return 1
    fi
}

check_service_worker() {
    log "Checking service worker..."
    
    if [[ -f "site/public/sw.js" ]]; then
        success "Service worker (sw.js) exists"
    else
        warning "Service worker not found (will be generated by next-pwa)"
    fi
    
    if [[ -f "site/public/workbox-*.js" ]]; then
        success "Workbox files found"
    else
        info "Workbox files will be generated during build"
    fi
}

optimize_build() {
    log "Running optimized build..."
    
    cd site
    
    # Clear cache first
    info "Clearing build cache..."
    rm -rf .next node_modules/.cache
    
    # Generate Prisma client
    info "Generating Prisma client..."
    bun run db:generate
    
    # Build with optimizations
    info "Building with PWA optimization..."
    NEXT_TELEMETRY_DISABLED=1 NODE_OPTIONS="--max-old-space-size=4096" bun run build
    
    cd ..
    success "Optimized build completed"
}

test_startup() {
    log "Testing startup performance..."
    
    # Kill any existing processes
    pkill -f "next start" 2>/dev/null || true
    sleep 2
    
    cd site
    
    info "Starting server with optimization..."
    timeout 15s NEXT_TELEMETRY_DISABLED=1 NODE_OPTIONS="--max-old-space-size=2048" bun run start -- -p 3003 2>&1 | tee /tmp/startup_test.log &
    
    local server_pid=$!
    sleep 10
    
    # Check if server is responsive
    if curl -s http://localhost:3003 > /dev/null 2>&1; then
        success "Server started successfully!"
        
        # Extract startup time
        if grep -q "Ready in" /tmp/startup_test.log; then
            local startup_time=$(grep "Ready in" /tmp/startup_test.log | grep -o "[0-9]*ms")
            success "Startup time: $startup_time"
        fi
    else
        warning "Server may not be fully ready yet"
    fi
    
    # Cleanup
    kill $server_pid 2>/dev/null || true
    cd ..
    
    rm -f /tmp/startup_test.log
}

show_recommendations() {
    info "üéØ Optimization Recommendations:"
    echo "  ‚Ä¢ Use 'bun run start:pwa' for optimized PWA startup"
    echo "  ‚Ä¢ Use 'bun run start:fast' for fastest startup"
    echo "  ‚Ä¢ Enable browser PWA installation for better UX"
    echo "  ‚Ä¢ Monitor startup times with 'bun run start:benchmark'"
    echo "  ‚Ä¢ Use offline.html for offline experience"
    echo
    
    info "üì± PWA Features enabled:"
    echo "  ‚úÖ Service Worker caching"
    echo "  ‚úÖ Offline support"
    echo "  ‚úÖ Install prompt"
    echo "  ‚úÖ App-like experience"
    echo "  ‚úÖ Background sync"
    echo
    
    info "‚ö° Performance optimizations:"
    echo "  ‚úÖ Memory optimization (2GB limit)"
    echo "  ‚úÖ Telemetry disabled"
    echo "  ‚úÖ Webpack cache enabled"
    echo "  ‚úÖ Image optimization"
    echo "  ‚úÖ Bundle splitting"
}

main() {
    show_banner
    
    log "Starting PWA & Performance optimization..."
    
    check_dependencies
    check_pwa_icons
    check_manifest
    check_service_worker
    optimize_build
    test_startup
    show_recommendations
    
    success "PWA & Performance optimization completed!"
    
    echo
    info "üöÄ Next steps:"
    echo "  1. Test PWA: bun run start:pwa"
    echo "  2. Test in browser: http://localhost:3000"
    echo "  3. Check PWA install prompt in browser"
    echo "  4. Test offline functionality"
}

# Handle interrupts
trap 'pkill -f "next start" 2>/dev/null || true; exit 1' INT TERM

main "$@"
