{
  "name": "tazacore-enterprise",
  "version": "2.0.0",
  "description": "TazaCore Enterprise Platform - Production-ready full-stack platform with automated deployment & Human Resource Management",
  "private": true,
  "workspaces": [
    "site"
  ],
  "scripts": {
    "// ========== DEVELOPMENT ==========": "",
    "dev": "cd site && bun run dev",
    "dev:full": "bun run db:generate && bun run dev",
    "dev:setup": "bun run install:all && bun run db:generate && bun run db:migrate && bun run db:seed:master && bun run dev",
    "dev:debug": "cd site && bun run dev:debug",
    "dev:reset": "bun run db:migrate:reset && bun run db:seed:master && bun run dev",
    "// ========== BUILD & START ==========": "",
    "build": "bun run clean:build && bun run db:generate && bun run build:site",
    "build:site": "cd site && bun run build",
    "build:check": "bun run type-check && bun run lint && bun run build",
    "build:analyze": "cd site && ANALYZE=true bun run build",
    "start": "cd site && bun run start",
    "start:production": "NODE_ENV=production bun run start",
    "// ========== PACKAGE MANAGEMENT ==========": "",
    "install:all": "bun install && cd site && bun install",
    "update:all": "bun update && cd site && bun update",
    "audit": "bun audit && cd site && bun audit",
    "audit:fix": "bun audit --fix && cd site && bun audit --fix",
    "// ========== CLEANING ==========": "",
    "clean": "bun run clean:deps && bun run clean:build && bun run clean:cache",
    "clean:deps": "rm -rf node_modules site/node_modules",
    "clean:build": "rm -rf site/.next site/tsconfig.tsbuildinfo",
    "clean:cache": "rm -rf .turbo site/.turbo",
    "clean:all": "bun run clean && rm -rf bun.lockb site/bun.lockb",
    "// ========== TESTING ==========": "",
    "test": "cd site && bun run test",
    "test:watch": "cd site && bun run test:watch",
    "test:coverage": "cd site && bun run test:coverage",
    "test:e2e": "cd site && bun run test:e2e",
    "// ========== LINTING & FORMATTING ==========": "",
    "lint": "cd site && bun run lint",
    "lint:site": "cd site && bun run lint",
    "lint:fix": "cd site && bun run lint:fix",
    "lint:fix:site": "cd site && bun run lint:fix",
    "format": "cd site && bun run format",
    "format:site": "cd site && bun run format",
    "format:check": "cd site && bun run format:check",
    "type-check": "cd site && bun run type-check",
    "type-check:site": "cd site && bun run type-check",
    "// ========== DATABASE (PRISMA) ==========": "",
    "db:generate": "cd site && bun run db:generate",
    "db:migrate": "cd site && bun run db:migrate",
    "db:migrate:deploy": "cd site && bun prisma migrate deploy",
    "db:migrate:reset": "cd site && bun prisma migrate reset --force",
    "db:migrate:status": "cd site && bun prisma migrate status",
    "db:seed": "cd site && bun run db:seed",
    "db:seed:hrm": "cd site && bun run prisma/seed/hrm-seed.ts",
    "db:seed:chat": "cd site && bun run prisma/seed/route.ts",
    "db:seed:master": "cd site && bun run db:seed:master",
    "db:seed:test": "./scripts/test-seed.sh",
    "db:studio": "cd site && bun run db:studio",
    "db:push": "cd site && bun prisma db push",
    "db:pull": "cd site && bun prisma db pull",
    "db:backup": "pg_dump $DATABASE_URL > backup_$(date +%Y%m%d_%H%M%S).sql",
    "db:restore": "psql $DATABASE_URL < backup.sql",
    "// ========== DOCKER ==========": "",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "docker:build": "docker-compose build",
    "docker:rebuild": "docker-compose build --no-cache",
    "docker:restart": "docker-compose restart",
    "docker:clean": "docker system prune -af && docker volume prune -f",
    "docker:reset": "bun run docker:down && bun run docker:clean && bun run docker:up",
    "// ========== DEPLOYMENT ==========": "",
    "deploy": "./scripts/deploy-production.sh",
    "deploy:staging": "./run_deploy.sh staging",
    "deploy:production": "./run_deploy.sh production",
    "deploy:wizard": "./scripts/deploy-remote-fixed.sh wizard",
    "deploy:cleanup": "./scripts/deploy-remote-fixed.sh cleanup",
    "deploy:rollback": "./scripts/deploy-production.sh rollback",
    "// ========== SECURITY & MONITORING ==========": "",
    "security:generate": "./scripts/generate-security.sh",
    "security:scan": "bun audit && cd site && bun audit && cd ../api && bun audit",
    "security:update": "bun run audit:fix",
    "// ========== ADMIN TOOLS ==========": "",
    "admin:create": "cd site && bun run scripts/create-admin-user.ts",
    "admin:super": "cd site && bun run scripts/create-super-admin.ts",
    "admin:cli": "cd site && node scripts/super-admin-cli.js",
    "admin:quick": "cd site && bun run scripts/quick-create-admin.ts",
    "// ========== UTILITIES ==========": "",
    "health": "curl -f http://localhost:3000/api/health",
    "logs": "tail -f site/logs/*.log 2>/dev/null || echo 'No log files found'",
    "monitor": "concurrently \"bun run health\" \"bun run logs\"",
    "backup": "bun run db:backup && tar -czf backup_$(date +%Y%m%d_%H%M%S).tar.gz site/public/uploads",
    "db:inspect": "cd site && bun prisma db pull && bun prisma format",
    "db:reset:hard": "bun run docker:down && docker volume prune -f && bun run docker:up && sleep 10 && bun run db:migrate && bun run db:seed:master",
    "dev:inspect": "concurrently \"bun run dev\" \"bun run db:studio\"",
    "dev:fresh": "bun run fresh:seed",
    "// ========== WORKFLOW ==========": "",
    "fresh": "bun run clean:all && bun run install:all && bun run db:generate && bun run dev",
    "fresh:seed": "bun run clean:all && bun run install:all && bun run db:generate && bun run db:migrate && bun run db:seed:master && bun run dev",
    "reset": "bun run db:migrate:reset && bun run db:seed:master",
    "setup": "bun run install:all && bun run db:generate && bun run db:migrate && bun run db:seed:master",
    "ci": "bun run install:all && bun run lint && bun run type-check && bun run test && bun run build",
    "precommit": "bun run lint:fix && bun run format && bun run type-check",
    "postinstall": "bun run db:generate",
    "prepare": "bun run db:generate",
    "db:reset": "cd shared && bun run db:reset"
  },
  "keywords": [
    "tazacore",
    "enterprise",
    "hrm",
    "human-resource-management",
    "full-stack",
    "nextjs",
    "nestjs",
    "typescript",
    "remote-deployment",
    "docker",
    "nginx",
    "ssl",
    "production",
    "postgresql",
    "redis",
    "minio",
    "jwt-auth",
    "role-based-access",
    "bun",
    "prisma",
    "automated-deployment"
  ],
  "author": "TazaCore Team",
  "license": "MIT",
  "homepage": "https://github.com/chikiet/TazaCore",
  "repository": {
    "type": "git",
    "url": "https://github.com/chikiet/TazaCore.git"
  },
  "bugs": {
    "url": "https://github.com/chikiet/TazaCore/issues"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "nodemon": "^3.0.2",
    "npm-run-all": "^4.1.5",
    "prisma": "^6.11.1",
    "rimraf": "^5.0.5",
    "ts-node": "^10.9.2",
    "wait-on": "^7.2.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "bun": ">=1.0.0"
  },
  "dependencies": {
    "@prisma/client": "^6.11.1",
    "@types/jssip": "^3.5.4",
    "@types/minimatch": "^6.0.0",
    "@types/xlsx": "^0.0.36",
    "jssip": "^3.10.1",
    "jwks-rsa": "^3.2.0",
    "node-cron": "^4.2.1",
    "xlsx": "^0.18.5"
  }
}
