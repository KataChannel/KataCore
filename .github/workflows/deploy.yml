name: KataCore Production Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: ${{ github.repository }}/api
  SITE_IMAGE_NAME: ${{ github.repository }}/site

jobs:
  # Build and Test Job
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: |
        bun install
        cd api && bun install
        cd ../site && bun install
        
    - name: Run tests
      run: |
        # API tests
        cd api && bun run test || echo "No tests configured"
        
        # Frontend tests  
        cd ../site && bun run test || echo "No tests configured"
        
    - name: Build applications
      run: |
        # Build API
        cd api && bun run build
        
        # Build Frontend
        cd ../site && bun run build
        
    - name: Test build script
      run: |
        chmod +x scripts/test-deploy.sh
        # ./scripts/test-deploy.sh # Commented out for now due to Docker requirements

  # Docker Build Job
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      site-image: ${{ steps.meta-site.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract API metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Extract Site metadata
      id: meta-site
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.SITE_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./api
        file: ./api/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Site image
      uses: docker/build-push-action@v5
      with:
        context: ./site
        file: ./site/Dockerfile
        push: true
        tags: ${{ steps.meta-site.outputs.tags }}
        labels: ${{ steps.meta-site.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Staging Deployment Job
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.yourdomain.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /opt/katacore-staging
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "${{ secrets.STAGING_ENV }}" > .env.prod
          
          # Update image tags in docker-compose
          sed -i 's|image: katacore/api:.*|image: ${{ needs.docker-build.outputs.api-image }}|' docker-compose.prod.yml
          sed -i 's|image: katacore/site:.*|image: ${{ needs.docker-build.outputs.site-image }}|' docker-compose.prod.yml
          
          # Deploy
          ./scripts/deploy-cloud.sh --local
          
          # Health check
          sleep 30
          ./scripts/monitor.sh --check

  # Production Deployment Job
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production'
    
    environment:
      name: production
      url: https://yourdomain.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /opt/katacore
          
          # Create backup before deployment
          docker-compose -f docker-compose.prod.yml exec -T backup /backup.sh
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "${{ secrets.PRODUCTION_ENV }}" > .env.prod
          
          # Update image tags in docker-compose
          sed -i 's|image: katacore/api:.*|image: ${{ needs.docker-build.outputs.api-image }}|' docker-compose.prod.yml
          sed -i 's|image: katacore/site:.*|image: ${{ needs.docker-build.outputs.site-image }}|' docker-compose.prod.yml
          
          # Deploy with zero-downtime
          ./scripts/deploy-cloud.sh --local
          
          # Health check
          sleep 60
          ./scripts/monitor.sh --check
          
          # Notify deployment success
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ KataCore Production Deployment Successful!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL || 'echo "No webhook configured"' }}

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.docker-build.outputs.api-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
