generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model affiliate_referrals {
  id          String     @id
  userId      String
  affiliateId String
  amount      Float      @default(0)
  commission  Float      @default(0)
  status      String     @default("PENDING")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  affiliates  affiliates @relation(fields: [affiliateId], references: [id])
  users       users      @relation(fields: [userId], references: [id])
}

model affiliates {
  id                  String                @id
  userId              String
  affiliateCode       String                @unique
  commissionRate      Float                 @default(0.1)
  totalEarnings       Float                 @default(0)
  isActive            Boolean               @default(true)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  affiliate_referrals affiliate_referrals[]
  users               users                 @relation(fields: [userId], references: [id])
}

model attendances {
  id         String           @id
  date       DateTime
  timeIn     DateTime?
  timeOut    DateTime?
  breakStart DateTime?
  breakEnd   DateTime?
  totalHours Float?
  overtime   Float?
  status     AttendanceStatus @default(PRESENT)
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime
  employeeId String
  userId     String
  employees  employees        @relation(fields: [employeeId], references: [id])
  users      users            @relation(fields: [userId], references: [id])

  @@unique([employeeId, date])
}

model audit_logs {
  id        String   @id
  action    String
  entity    String
  entityId  String?
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())
  userId    String?
  users     users?   @relation(fields: [userId], references: [id])
}

model call_extension_users {
  id              String          @id
  userId          String
  callExtensionId String
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  call_extensions call_extensions @relation(fields: [callExtensionId], references: [id])
  users           users           @relation(fields: [userId], references: [id])

  @@unique([userId, callExtensionId])
}

model call_extensions {
  id                   String                 @id
  extCode              String                 @unique
  password             String?
  name                 String
  description          String?
  status               String                 @default("active")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  call_extension_users call_extension_users[]
}

model call_history_overview {
  id                     String   @id
  direction              String
  callerIdNumber         String?
  outboundCallerIdNumber String?
  destinationNumber      String?
  startEpoch             String?
  endEpoch               String?
  answerEpoch            String?
  duration               String?
  billsec                String?
  sipHangupDisposition   String?
  recordPath             String?
  callStatus             String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  cdrId                  String   @unique
}

model conversation_members {
  id             String    @id
  joinedAt       DateTime  @default(now())
  leftAt         DateTime?
  role           String    @default("MEMBER")
  isMuted        Boolean   @default(false)
  isBlocked      Boolean   @default(false)
  lastRead       DateTime?
  conversationId String
  userId         String

  @@unique([conversationId, userId])
}

model conversations {
  id                                     String           @id
  title                                  String?
  description                            String?
  avatar                                 String?
  type                                   ConversationType @default(GROUP)
  isPublic                               Boolean          @default(false)
  isArchived                             Boolean          @default(false)
  lastActivity                           DateTime?
  createdAt                              DateTime         @default(now())
  updatedAt                              DateTime
  createdById                            String
  users_conversations_createdByIdTousers users            @relation("conversations_createdByIdTousers", fields: [createdById], references: [id])
  messages                               messages[]
  users_ConversationParticipants         users[]          @relation("ConversationParticipants")
}

model departments {
  id                String        @id
  name              String        @unique
  description       String?
  code              String        @unique
  budget            Float?
  location          String?
  phone             String?
  email             String?
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime
  managerId         String?
  parentId          String?
  users             users?        @relation(fields: [managerId], references: [id])
  departments       departments?  @relation("departmentsTodepartments", fields: [parentId], references: [id])
  other_departments departments[] @relation("departmentsTodepartments")
  employees         employees[]
  positions         positions[]
}

model employees {
  id                  String                @id
  employeeId          String                @unique
  firstName           String
  lastName            String
  fullName            String
  dateOfBirth         DateTime?
  gender              String?
  nationality         String?
  idNumber            String?               @unique
  address             String?
  phone               String?
  emergencyContact    String?
  hireDate            DateTime
  terminationDate     DateTime?
  salary              Float?
  status              EmployeeStatus        @default(ACTIVE)
  contractType        ContractType          @default(FULL_TIME)
  notes               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  userId              String                @unique
  departmentId        String
  positionId          String
  attendances         attendances[]
  departments         departments           @relation(fields: [departmentId], references: [id])
  positions           positions             @relation(fields: [positionId], references: [id])
  users               users                 @relation(fields: [userId], references: [id])
  leave_requests      leave_requests[]
  payrolls            payrolls[]
  performance_reviews performance_reviews[]
}

model facebook_interactions {
  id                    String          @id
  facebookInteractionId String          @unique
  facebookPageId        String
  type                  InteractionType
  userName              String
  userId                String
  message               String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime
  facebook_pages        facebook_pages  @relation(fields: [facebookPageId], references: [facebookPageId], onDelete: Cascade)
}

model facebook_pages {
  id                    String                  @id
  facebookPageId        String                  @unique
  name                  String
  category              String?
  fanCount              Int                     @default(0)
  followersCount        Int                     @default(0)
  link                  String?
  about                 String?
  phone                 String?
  website               String?
  accessToken           String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  facebook_interactions facebook_interactions[]
}

model friend_requests {
  id                                      String   @id
  status                                  String   @default("PENDING")
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime
  senderId                                String
  receiverId                              String
  users_friend_requests_receiverIdTousers users    @relation("friend_requests_receiverIdTousers", fields: [receiverId], references: [id])
  users_friend_requests_senderIdTousers   users    @relation("friend_requests_senderIdTousers", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
}

model leave_requests {
  id         String      @id
  startDate  DateTime
  endDate    DateTime
  days       Int
  type       LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  rejectedBy String?
  rejectedAt DateTime?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  employeeId String
  userId     String
  employees  employees   @relation(fields: [employeeId], references: [id])
  users      users       @relation(fields: [userId], references: [id])
}

model message_reactions {
  id        String   @id
  emoji     String
  createdAt DateTime @default(now())
  messageId String
  userId    String
  messages  messages @relation(fields: [messageId], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
}

model messages {
  id                String              @id
  content           String
  type              MessageType         @default(TEXT)
  fileUrl           String?
  fileName          String?
  fileSize          Int?
  isEdited          Boolean             @default(false)
  isDeleted         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  conversationId    String
  userId            String
  parentId          String?
  message_reactions message_reactions[]
  conversations     conversations       @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messages          messages?           @relation("messagesTomessages", fields: [parentId], references: [id])
  other_messages    messages[]          @relation("messagesTomessages")
  users             users               @relation(fields: [userId], references: [id])
  reports           reports[]
}

model notifications {
  id        String   @id
  title     String
  content   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id])
}

model payrolls {
  id          String    @id
  period      String
  basicSalary Float
  overtime    Float?    @default(0)
  bonus       Float?    @default(0)
  deductions  Float?    @default(0)
  netSalary   Float
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  employeeId  String
  userId      String
  employees   employees @relation(fields: [employeeId], references: [id])
  users       users     @relation(fields: [userId], references: [id])

  @@unique([employeeId, period])
}

model performance_reviews {
  id                                          String    @id
  period                                      String
  goals                                       String?
  achievements                                String?
  rating                                      Float?
  feedback                                    String?
  createdAt                                   DateTime  @default(now())
  updatedAt                                   DateTime
  employeeId                                  String
  reviewerId                                  String
  userId                                      String
  employees                                   employees @relation(fields: [employeeId], references: [id])
  users_performance_reviews_reviewerIdTousers users     @relation("performance_reviews_reviewerIdTousers", fields: [reviewerId], references: [id])
  users_performance_reviews_userIdTousers     users     @relation("performance_reviews_userIdTousers", fields: [userId], references: [id])

  @@unique([employeeId, period])
}

model positions {
  id           String      @id
  title        String
  description  String?
  level        Int         @default(1)
  minSalary    Float?
  maxSalary    Float?
  requirements String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  departmentId String
  employees    employees[]
  departments  departments @relation(fields: [departmentId], references: [id])
}

model reports {
  id                                  String    @id
  type                                String
  description                         String?
  status                              String    @default("PENDING")
  createdAt                           DateTime  @default(now())
  updatedAt                           DateTime
  reporterId                          String
  reportedUserId                      String?
  messageId                           String?
  messages                            messages? @relation(fields: [messageId], references: [id])
  users_reports_reportedUserIdTousers users?    @relation("reports_reportedUserIdTousers", fields: [reportedUserId], references: [id])
  users_reports_reporterIdTousers     users     @relation("reports_reporterIdTousers", fields: [reporterId], references: [id])
}

model roles {
  id           String   @id
  name         String   @unique
  description  String?
  permissions  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  isSystemRole Boolean  @default(false)
  level        Int      @default(10)
  modules      String?
  users        users[]
}

model sessions {
  id        String   @id
  token     String   @unique
  device    String?
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  users     users    @relation(fields: [userId], references: [id])
}

model user_settings {
  id                  String  @id
  theme               String  @default("LIGHT")
  language            String  @default("vi")
  notificationEnabled Boolean @default(true)
  soundEnabled        Boolean @default(true)
  showOnlineStatus    Boolean @default(true)
  allowFriendRequests Boolean @default(true)
  allowDirectMessages Boolean @default(true)
  emailNotifications  Boolean @default(false)
  pushNotifications   Boolean @default(true)
  userId              String  @unique
  users               users   @relation(fields: [userId], references: [id])
}

model users {
  id                                                        String                 @id
  email                                                     String?                @unique
  username                                                  String?                @unique
  phone                                                     String?                @unique
  displayName                                               String
  password                                                  String?
  avatar                                                    String?
  bio                                                       String?
  status                                                    UserStatus             @default(OFFLINE)
  isVerified                                                Boolean                @default(false)
  isActive                                                  Boolean                @default(true)
  lastSeen                                                  DateTime?
  createdAt                                                 DateTime               @default(now())
  updatedAt                                                 DateTime
  googleId                                                  String?                @unique
  facebookId                                                String?                @unique
  appleId                                                   String?                @unique
  otpCode                                                   String?
  otpExpiry                                                 DateTime?
  roleId                                                    String
  affiliate_referrals                                       affiliate_referrals[]
  affiliates                                                affiliates[]
  attendances                                               attendances[]
  audit_logs                                                audit_logs[]
  call_extension_users                                      call_extension_users[]
  conversations_conversations_createdByIdTousers            conversations[]        @relation("conversations_createdByIdTousers")
  departments                                               departments[]
  employees                                                 employees?
  friend_requests_friend_requests_receiverIdTousers         friend_requests[]      @relation("friend_requests_receiverIdTousers")
  friend_requests_friend_requests_senderIdTousers           friend_requests[]      @relation("friend_requests_senderIdTousers")
  leave_requests                                            leave_requests[]
  message_reactions                                         message_reactions[]
  messages                                                  messages[]
  notifications                                             notifications[]
  payrolls                                                  payrolls[]
  performance_reviews_performance_reviews_reviewerIdTousers performance_reviews[]  @relation("performance_reviews_reviewerIdTousers")
  performance_reviews_performance_reviews_userIdTousers     performance_reviews[]  @relation("performance_reviews_userIdTousers")
  reports_reports_reportedUserIdTousers                     reports[]              @relation("reports_reportedUserIdTousers")
  reports_reports_reporterIdTousers                         reports[]              @relation("reports_reporterIdTousers")
  sessions                                                  sessions[]
  user_settings                                             user_settings?
  roles                                                     roles                  @relation(fields: [roleId], references: [id])
  users_BlockedUsers_A                                      users[]                @relation("BlockedUsers")
  users_BlockedUsers_B                                      users[]                @relation("BlockedUsers")
  conversations_ConversationParticipants                    conversations[]        @relation("ConversationParticipants")
  users_UserFriends_A                                       users[]                @relation("UserFriends")
  users_UserFriends_B                                       users[]                @relation("UserFriends")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  WORK_FROM_HOME
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  PROBATION
}

enum InteractionType {
  COMMENT
  MESSAGE
  LIKE
  SHARE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LeaveType {
  ANNUAL
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  EMERGENCY
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}
