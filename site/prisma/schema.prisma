generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id           String   @id @default(uuid())
  name         String   @unique
  description  String?
  permissions  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isSystemRole Boolean  @default(false)
  level        Int      @default(10)
  modules      String?
  users        User[]

  @@map("roles")
}

model User {
  id                     String              @id @default(uuid())
  email                  String?             @unique
  username               String?             @unique
  phone                  String?             @unique
  displayName            String
  password               String?
  avatar                 String?
  bio                    String?
  status                 UserStatus          @default(OFFLINE)
  isVerified             Boolean             @default(false)
  isActive               Boolean             @default(true)
  lastSeen               DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  googleId               String?             @unique
  facebookId             String?             @unique
  appleId                String?             @unique
  otpCode                String?
  otpExpiry              DateTime?
  roleId                 String
  attendances            Attendance[]
  auditLogs              AuditLog[]
  CallExtensionUser      CallExtensionUser[]
  conversationsCreated   Conversation[]      @relation("ConversationCreator")
  managedDepartments     Department[]        @relation("DepartmentManager")
  employee               Employee?
  receivedFriendRequests FriendRequest[]     @relation("FriendRequestReceiver")
  sentFriendRequests     FriendRequest[]     @relation("FriendRequestSender")
  leaveRequests          LeaveRequest[]
  messageReactions       MessageReaction[]
  messages               Message[]
  notifications          Notification[]
  payrolls               Payroll[]
  reviewsGiven           PerformanceReview[] @relation("ReviewerReviews")
  performanceReviews     PerformanceReview[] @relation("EmployeeReviews")
  reportsReceived        Report[]            @relation("ReportedUser")
  reportsMade            Report[]            @relation("ReportReporter")
  sessions               Session[]
  settings               UserSettings?
  role                   Role                @relation(fields: [roleId], references: [id])
  users_BlockedUsers_A   User[]              @relation("BlockedUsers")
  users_BlockedUsers_B   User[]              @relation("BlockedUsers")
  conversationsJoined    Conversation[]      @relation("ConversationParticipants")
  users_UserFriends_A    User[]              @relation("UserFriends")
  users_UserFriends_B    User[]              @relation("UserFriends")
  affiliates             Affiliate[]
  affiliateReferrals     AffiliateReferral[]

  @@map("users")
}

model Conversation {
  id           String           @id @default(uuid())
  title        String?
  description  String?
  avatar       String?
  type         ConversationType @default(GROUP)
  isPublic     Boolean          @default(false)
  isArchived   Boolean          @default(false)
  lastActivity DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  createdById  String
  createdBy    User             @relation("ConversationCreator", fields: [createdById], references: [id])
  messages     Message[]
  participants User[]           @relation("ConversationParticipants")

  @@map("conversations")
}

model Message {
  id             String            @id @default(uuid())
  content        String
  type           MessageType       @default(TEXT)
  fileUrl        String?
  fileName       String?
  fileSize       Int?
  isEdited       Boolean           @default(false)
  isDeleted      Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  conversationId String
  userId         String
  parentId       String?
  reactions      MessageReaction[]
  conversation   Conversation      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  parent         Message?          @relation("MessageReplies", fields: [parentId], references: [id])
  replies        Message[]         @relation("MessageReplies")
  user           User              @relation(fields: [userId], references: [id])
  reports        Report[]

  @@map("messages")
}

model MessageReaction {
  id        String   @id @default(uuid())
  emoji     String
  createdAt DateTime @default(now())
  messageId String
  userId    String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model FriendRequest {
  id         String   @id @default(uuid())
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  senderId   String
  receiverId String
  receiver   User     @relation("FriendRequestReceiver", fields: [receiverId], references: [id])
  sender     User     @relation("FriendRequestSender", fields: [senderId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model ConversationMember {
  id             String    @id @default(uuid())
  joinedAt       DateTime  @default(now())
  leftAt         DateTime?
  role           String    @default("MEMBER")
  isMuted        Boolean   @default(false)
  isBlocked      Boolean   @default(false)
  lastRead       DateTime?
  conversationId String
  userId         String

  @@unique([conversationId, userId])
  @@map("conversation_members")
}

model UserSettings {
  id                  String  @id @default(uuid())
  theme               String  @default("LIGHT")
  language            String  @default("vi")
  notificationEnabled Boolean @default(true)
  soundEnabled        Boolean @default(true)
  showOnlineStatus    Boolean @default(true)
  allowFriendRequests Boolean @default(true)
  allowDirectMessages Boolean @default(true)
  emailNotifications  Boolean @default(false)
  pushNotifications   Boolean @default(true)
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id])

  @@map("user_settings")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  device    String?
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String?
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Report {
  id             String   @id @default(uuid())
  type           String
  description    String?
  status         String   @default("PENDING")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reporterId     String
  reportedUserId String?
  messageId      String?
  message        Message? @relation(fields: [messageId], references: [id])
  reportedUser   User?    @relation("ReportedUser", fields: [reportedUserId], references: [id])
  reporter       User     @relation("ReportReporter", fields: [reporterId], references: [id])

  @@map("reports")
}

model Department {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  code        String       @unique
  budget      Float?
  location    String?
  phone       String?
  email       String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  managerId   String?
  parentId    String?
  manager     User?        @relation("DepartmentManager", fields: [managerId], references: [id])
  parent      Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    Department[] @relation("DepartmentHierarchy")
  employees   Employee[]
  positions   Position[]

  @@map("departments")
}

model Position {
  id           String     @id @default(uuid())
  title        String
  description  String?
  level        Int        @default(1)
  minSalary    Float?
  maxSalary    Float?
  requirements String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  departmentId String
  employees    Employee[]
  department   Department @relation(fields: [departmentId], references: [id])

  @@map("positions")
}

model Employee {
  id                 String              @id @default(uuid())
  employeeId         String              @unique
  firstName          String
  lastName           String
  fullName           String
  dateOfBirth        DateTime?
  gender             String?
  nationality        String?
  idNumber           String?             @unique
  address            String?
  phone              String?
  emergencyContact   String?
  hireDate           DateTime
  terminationDate    DateTime?
  salary             Float?
  status             EmployeeStatus      @default(ACTIVE)
  contractType       ContractType        @default(FULL_TIME)
  notes              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             String              @unique
  departmentId       String
  positionId         String
  attendances        Attendance[]
  department         Department          @relation(fields: [departmentId], references: [id])
  position           Position            @relation(fields: [positionId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
  leaveRequests      LeaveRequest[]
  payrolls           Payroll[]
  performanceReviews PerformanceReview[]

  @@map("employees")
}

model Attendance {
  id         String           @id @default(uuid())
  date       DateTime
  timeIn     DateTime?
  timeOut    DateTime?
  breakStart DateTime?
  breakEnd   DateTime?
  totalHours Float?
  overtime   Float?
  status     AttendanceStatus @default(PRESENT)
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  employeeId String
  userId     String
  employee   Employee         @relation(fields: [employeeId], references: [id])
  user       User             @relation(fields: [userId], references: [id])

  @@unique([employeeId, date])
  @@map("attendances")
}

model LeaveRequest {
  id         String      @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  days       Int
  type       LeaveType
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?
  approvedAt DateTime?
  rejectedBy String?
  rejectedAt DateTime?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  employeeId String
  userId     String
  employee   Employee    @relation(fields: [employeeId], references: [id])
  user       User        @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

model Payroll {
  id          String    @id @default(uuid())
  period      String
  basicSalary Float
  overtime    Float?    @default(0)
  bonus       Float?    @default(0)
  deductions  Float?    @default(0)
  netSalary   Float
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employeeId  String
  userId      String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([employeeId, period])
  @@map("payrolls")
}

model PerformanceReview {
  id           String   @id @default(uuid())
  period       String
  goals        String?
  achievements String?
  rating       Float?
  feedback     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employeeId   String
  reviewerId   String
  userId       String
  employee     Employee @relation(fields: [employeeId], references: [id])
  reviewer     User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  user         User     @relation("EmployeeReviews", fields: [userId], references: [id])

  @@unique([employeeId, period])
  @@map("performance_reviews")
}

model CallHistoryOverview {
  id                     String   @id @default(uuid())
  direction              String
  callerIdNumber         String?
  outboundCallerIdNumber String?
  destinationNumber      String?
  startEpoch             String?
  endEpoch               String?
  answerEpoch            String?
  duration               String?
  billsec                String?
  sipHangupDisposition   String?
  recordPath             String?
  callStatus             String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  cdrId                  String   @unique

  @@map("call_history_overview")
}

model CallExtension {
  id          String              @id @default(uuid())
  extCode     String              @unique
  password    String?
  name        String
  description String?
  status      String              @default("active")
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  users       CallExtensionUser[]

  @@map("call_extensions")
}

model CallExtensionUser {
  id              String        @id @default(uuid())
  userId          String
  callExtensionId String
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now())
  callExtension   CallExtension @relation(fields: [callExtensionId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@unique([userId, callExtensionId])
  @@map("call_extension_users")
}

model Affiliate {
  id            String              @id @default(uuid())
  userId        String
  affiliateCode String              @unique
  commissionRate Float              @default(0.1)
  totalEarnings Float               @default(0)
  isActive      Boolean             @default(true)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  user          User                @relation(fields: [userId], references: [id])
  referrals     AffiliateReferral[]

  @@map("affiliates")
}

model AffiliateReferral {
  id          String    @id @default(uuid())
  userId      String
  affiliateId String
  amount      Float     @default(0)
  commission  Float     @default(0)
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("affiliate_referrals")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  PROBATION
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum LeaveType {
  ANNUAL
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  EMERGENCY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  WORK_FROM_HOME
}

// Facebook Social Media Models
model FacebookPage {
  id              String   @id @default(uuid())
  facebookPageId  String   @unique
  name            String
  category        String?
  fanCount        Int      @default(0)
  followersCount  Int      @default(0)
  link            String?
  about           String?
  phone           String?
  website         String?
  accessToken     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  interactions    FacebookInteraction[]

  @@map("facebook_pages")
}

model FacebookInteraction {
  id                     String       @id @default(uuid())
  facebookInteractionId  String       @unique
  facebookPageId         String
  type                   InteractionType
  userName               String
  userId                 String
  message                String?
  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
  
  // Relations
  facebookPage           FacebookPage @relation(fields: [facebookPageId], references: [facebookPageId], onDelete: Cascade)

  @@map("facebook_interactions")
}

enum InteractionType {
  COMMENT
  MESSAGE
  LIKE
  SHARE
}
