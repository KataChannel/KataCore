// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

// HR-specific Enums
enum EmployeeStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
  PROBATION
}

enum ContractType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum LeaveType {
  ANNUAL
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  EMERGENCY
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  WORK_FROM_HOME
}

// Role model - Quản lý quyền hạn
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions String // JSON string of permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  @@map("roles")
}

// User model - Người dùng
model User {
  id          String     @id @default(uuid())
  email       String?    @unique
  username    String?    @unique
  phone       String?    @unique
  displayName String
  password    String?
  avatar      String?
  bio         String?
  status      UserStatus @default(OFFLINE)
  isVerified  Boolean    @default(false)
  isActive    Boolean    @default(true)
  lastSeen    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Auth providers
  googleId    String?    @unique
  facebookId  String?    @unique
  appleId     String?    @unique
  
  // OTP for phone verification
  otpCode     String?
  otpExpiry   DateTime?
  
  // Foreign keys
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  // Relations
  messages              Message[]
  conversationsCreated  Conversation[] @relation("ConversationCreator")
  conversationsJoined   Conversation[] @relation("ConversationParticipants")
  messageReactions      MessageReaction[]
  notifications         Notification[]
  sentFriendRequests    FriendRequest[] @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestReceiver")
  friends               User[]          @relation("UserFriends")
  friendsOf             User[]          @relation("UserFriends")
  blockedUsers          User[]          @relation("BlockedUsers")
  blockedByUsers        User[]          @relation("BlockedUsers")
  settings              UserSettings?
  sessions              Session[]
  auditLogs             AuditLog[]
  reportsMade           Report[]        @relation("ReportReporter")
  reportsReceived       Report[]        @relation("ReportedUser")

  // HR Relations
  employee              Employee?
  managedDepartments    Department[]      @relation("DepartmentManager")
  attendances           Attendance[]
  leaveRequests         LeaveRequest[]
  payrolls              Payroll[]
  performanceReviews    PerformanceReview[] @relation("EmployeeReviews")
  reviewsGiven          PerformanceReview[] @relation("ReviewerReviews")

  @@map("users")
}

// Conversation model - Cuộc trò chuyện
model Conversation {
  id          String           @id @default(uuid())
  title       String?
  description String?
  avatar      String?
  type        ConversationType @default(GROUP)
  isPublic    Boolean          @default(false)
  isArchived  Boolean          @default(false)
  lastActivity DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Foreign keys
  createdById String
  createdBy   User   @relation("ConversationCreator", fields: [createdById], references: [id])

  // Relations
  participants User[]    @relation("ConversationParticipants")
  messages     Message[]

  @@map("conversations")
}

// Message model - Tin nhắn
model Message {
  id        String      @id @default(uuid())
  content   String
  type      MessageType @default(TEXT)
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  isEdited  Boolean     @default(false)
  isDeleted Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Foreign keys
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Self-referencing for replies
  parentId String?
  parent   Message?  @relation("MessageReplies", fields: [parentId], references: [id])
  replies  Message[] @relation("MessageReplies")

  // Relations
  reactions MessageReaction[]
  reports   Report[]

  @@map("messages")
}

// MessageReaction model - Reaction cho tin nhắn
model MessageReaction {
  id        String   @id @default(uuid())
  emoji     String
  createdAt DateTime @default(now())

  // Foreign keys
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Unique constraint: một user chỉ có thể react một emoji cho một message
  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

// FriendRequest model - Lời mời kết bạn
model FriendRequest {
  id        String   @id @default(uuid())
  status    String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  senderId String
  sender   User   @relation("FriendRequestSender", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("FriendRequestReceiver", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

// Notification model - Thông báo
model Notification {
  id        String   @id @default(uuid())
  title     String
  content   String
  type      String   // MESSAGE, FRIEND_REQUEST, SYSTEM, etc.
  isRead    Boolean  @default(false)
  data      Json?    // Additional data as JSON
  createdAt DateTime @default(now())

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// ConversationMember model - Thành viên cuộc trò chuyện với thông tin chi tiết
model ConversationMember {
  id         String   @id @default(uuid())
  joinedAt   DateTime @default(now())
  leftAt     DateTime?
  role       String   @default("MEMBER") // ADMIN, MODERATOR, MEMBER
  isMuted    Boolean  @default(false)
  isBlocked  Boolean  @default(false)
  lastRead   DateTime?

  // Foreign keys
  conversationId String
  userId         String

  @@unique([conversationId, userId])
  @@map("conversation_members")
}

// Settings model - Cài đặt người dùng
model UserSettings {
  id                    String  @id @default(uuid())
  theme                 String  @default("LIGHT") // LIGHT, DARK, AUTO
  language              String  @default("vi")
  notificationEnabled   Boolean @default(true)
  soundEnabled          Boolean @default(true)
  showOnlineStatus      Boolean @default(true)
  allowFriendRequests   Boolean @default(true)
  allowDirectMessages   Boolean @default(true)
  emailNotifications    Boolean @default(false)
  pushNotifications     Boolean @default(true)

  // Foreign keys
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_settings")
}

// Session model - Quản lý phiên đăng nhập
model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  device    String?
  ipAddress String?
  userAgent String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("sessions")
}

// AuditLog model - Lịch sử hoạt động
model AuditLog {
  id        String   @id @default(uuid())
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  entity    String   // USER, MESSAGE, CONVERSATION, etc.
  entityId  String?
  oldValues Json?
  newValues Json?
  createdAt DateTime @default(now())

  // Foreign keys
  userId String?
  user   User?  @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Report model - Báo cáo vi phạm
model Report {
  id          String   @id @default(uuid())
  type        String   // SPAM, HARASSMENT, INAPPROPRIATE, etc.
  description String?
  status      String   @default("PENDING") // PENDING, REVIEWING, RESOLVED, DISMISSED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  reporterId String
  reporter   User   @relation("ReportReporter", fields: [reporterId], references: [id])

  reportedUserId String?
  reportedUser   User?   @relation("ReportedUser", fields: [reportedUserId], references: [id])

  messageId String?
  message   Message? @relation(fields: [messageId], references: [id])

  @@map("reports")
}

// =============================================================================
// HR MANAGEMENT MODELS
// =============================================================================

// Department model - Phòng ban
model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  code        String   @unique
  budget      Float?
  location    String?
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  managerId String?
  manager   User?   @relation("DepartmentManager", fields: [managerId], references: [id])

  parentId String?
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[] @relation("DepartmentHierarchy")

  // Relations
  employees Employee[]
  positions Position[]

  @@map("departments")
}

// Position model - Chức vụ
model Position {
  id          String   @id @default(uuid())
  title       String
  description String?
  level       Int      @default(1)
  minSalary   Float?
  maxSalary   Float?
  requirements String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])

  // Relations
  employees Employee[]

  @@map("positions")
}

// Employee model - Nhân viên
model Employee {
  id           String         @id @default(uuid())
  employeeId   String         @unique
  firstName    String
  lastName     String
  fullName     String
  dateOfBirth  DateTime?
  gender       String?
  nationality  String?
  idNumber     String?        @unique
  address      String?
  phone        String?
  emergencyContact String?
  hireDate     DateTime
  terminationDate DateTime?
  salary       Float?
  status       EmployeeStatus @default(ACTIVE)
  contractType ContractType   @default(FULL_TIME)
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Foreign keys
  userId       String     @unique
  user         User       @relation(fields: [userId], references: [id])
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  positionId   String
  position     Position   @relation(fields: [positionId], references: [id])

  // Relations
  attendances        Attendance[]
  leaveRequests      LeaveRequest[]
  payrolls           Payroll[]
  performanceReviews PerformanceReview[]

  @@map("employees")
}

// Attendance model - Chấm công
model Attendance {
  id          String           @id @default(uuid())
  date        DateTime
  timeIn      DateTime?
  timeOut     DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?
  totalHours  Float?
  overtime    Float?
  status      AttendanceStatus @default(PRESENT)
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Foreign keys
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@unique([employeeId, date])
  @@map("attendances")
}

// LeaveRequest model - Đơn xin nghỉ
model LeaveRequest {
  id          String      @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  days        Int
  type        LeaveType
  reason      String
  status      LeaveStatus @default(PENDING)
  approvedBy  String?
  approvedAt  DateTime?
  rejectedBy  String?
  rejectedAt  DateTime?
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Foreign keys
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@map("leave_requests")
}

// Payroll model - Bảng lương
model Payroll {
  id          String   @id @default(uuid())
  period      String   // YYYY-MM format
  basicSalary Float
  overtime    Float?   @default(0)
  bonus       Float?   @default(0)
  deductions  Float?   @default(0)
  netSalary   Float
  paidAt      DateTime?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])

  @@unique([employeeId, period])
  @@map("payrolls")
}

// PerformanceReview model - Đánh giá hiệu suất
model PerformanceReview {
  id          String   @id @default(uuid())
  period      String   // YYYY-QX or YYYY format
  goals       String?
  achievements String?
  rating      Float?   // 1-5 scale
  feedback    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
  reviewerId String
  reviewer   User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  userId     String
  user       User     @relation("EmployeeReviews", fields: [userId], references: [id])

  @@unique([employeeId, period])
  @@map("performance_reviews")
}