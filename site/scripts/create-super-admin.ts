// Script t·∫°o Super Administrator v·ªõi ƒë·∫ßy ƒë·ªß quy·ªÅn h·ªá th·ªëng
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// Configuration from environment variables or defaults
const ADMIN_CONFIG = {
  email: process.env.ADMIN_EMAIL || 'admin@taza.com',
  password: process.env.ADMIN_PASSWORD || 'TazaAdmin@2024!',
  displayName: process.env.ADMIN_DISPLAY_NAME || 'Super Administrator',
  username: process.env.ADMIN_USERNAME || 'superadmin',
};

async function createSuperAdmin() {
  try {
    console.log('üöÄ ƒêang t·∫°o Super Administrator...');
    console.log(`üìß Email: ${ADMIN_CONFIG.email}`);
    console.log(`üë§ Display Name: ${ADMIN_CONFIG.displayName}`);
    console.log(`üÜî Username: ${ADMIN_CONFIG.username}`);

    // 1. T·∫°o ho·∫∑c c·∫≠p nh·∫≠t Super Admin Role
    const superAdminRole = await prisma.role.upsert({
      where: { name: 'Super Administrator' },
      update: {
        description: 'Qu·∫£n tr·ªã vi√™n c·∫•p cao nh·∫•t - c√≥ to√†n quy·ªÅn h·ªá th·ªëng TazaCore',
        permissions: JSON.stringify([
          // System permissions
          'system:admin',
          'system:manage',
          'system:configure',
          'system:backup',

          // User management - to√†n quy·ªÅn
          'create:user',
          'read:user',
          'update:user',
          'delete:user',
          'manage:user',
          'create:role',
          'read:role',
          'update:role',
          'delete:role',
          'manage:role',
          'create:permission',
          'read:permission',
          'update:permission',
          'delete:permission',

          // Sales Management - to√†n quy·ªÅn
          'admin:sales',
          'manage:sales',
          'create:order',
          'read:order',
          'update:order',
          'delete:order',
          'approve:order',
          'cancel:order',
          'read:pipeline',
          'manage:pipeline',
          'read:revenue',
          'read:sales_reports',
          'read:sales_analytics',
          'create:quote',
          'read:quote',
          'update:quote',
          'approve:quote',
          'read:sales_team',
          'manage:sales_team',

          // CRM - to√†n quy·ªÅn
          'admin:crm',
          'manage:crm',
          'create:customer',
          'read:customer',
          'update:customer',
          'delete:customer',
          'create:lead',
          'read:lead',
          'update:lead',
          'delete:lead',
          'convert:lead',
          'create:campaign',
          'read:campaign',
          'update:campaign',
          'delete:campaign',
          'manage:campaign',
          'read:customer_analytics',
          'read:interaction_history',

          // Inventory Management - to√†n quy·ªÅn
          'admin:inventory',
          'manage:inventory',
          'create:product',
          'read:product',
          'update:product',
          'delete:product',
          'read:stock',
          'update:stock',
          'adjust:stock',
          'create:warehouse',
          'read:warehouse',
          'update:warehouse',
          'delete:warehouse',
          'manage:warehouse',
          'read:inventory_reports',
          'create:stocktake',
          'approve:stocktake',

          // Finance & Accounting - to√†n quy·ªÅn
          'admin:finance',
          'manage:finance',
          'create:invoice',
          'read:invoice',
          'update:invoice',
          'delete:invoice',
          'approve:invoice',
          'create:payment',
          'read:payment',
          'update:payment',
          'delete:payment',
          'process:payment',
          'read:financial_reports',
          'create:financial_reports',
          'export:financial_reports',
          'manage:chart_of_accounts',
          'manage:tax_settings',
          'manage:budget',

          // HRM - to√†n quy·ªÅn
          'admin:hrm',
          'manage:hrm',
          'create:employee',
          'read:employee',
          'update:employee',
          'delete:employee',
          'create:department',
          'read:department',
          'update:department',
          'delete:department',
          'manage:department',
          'create:position',
          'read:position',
          'update:position',
          'delete:position',
          'create:attendance',
          'read:attendance',
          'update:attendance',
          'delete:attendance',
          'approve:attendance',
          'create:payroll',
          'read:payroll',
          'update:payroll',
          'delete:payroll',
          'process:payroll',
          'create:leave_request',
          'read:leave_request',
          'update:leave_request',
          'approve:leave_request',
          'read:performance_review',
          'create:performance_review',
          'update:performance_review',

          // Project Management - to√†n quy·ªÅn
          'admin:projects',
          'manage:projects',
          'create:project',
          'read:project',
          'update:project',
          'delete:project',
          'archive:project',
          'create:task',
          'read:task',
          'update:task',
          'delete:task',
          'assign:task',
          'manage:team',
          'read:team',
          'create:team',
          'update:team',
          'delete:team',
          'read:project_reports',
          'read:time_tracking',
          'manage:project_budget',

          // Manufacturing - to√†n quy·ªÅn
          'admin:manufacturing',
          'manage:manufacturing',
          'create:production_plan',
          'read:production_plan',
          'update:production_plan',
          'delete:production_plan',
          'create:work_order',
          'read:work_order',
          'update:work_order',
          'delete:work_order',
          'approve:work_order',
          'manage:quality_control',
          'read:quality_control',
          'create:quality_check',
          'approve:quality_check',
          'read:production_reports',
          'manage:production_schedule',

          // Marketing - to√†n quy·ªÅn
          'admin:marketing',
          'manage:marketing',
          'create:marketing_campaign',
          'read:marketing_campaign',
          'update:marketing_campaign',
          'delete:marketing_campaign',
          'create:content',
          'read:content',
          'update:content',
          'delete:content',
          'publish:content',
          'manage:social_media',
          'read:social_media',
          'create:social_post',
          'schedule:social_post',
          'read:marketing_analytics',
          'create:marketing_reports',

          // Customer Support - to√†n quy·ªÅn
          'admin:support',
          'manage:support',
          'create:ticket',
          'read:ticket',
          'update:ticket',
          'delete:ticket',
          'assign:ticket',
          'close:ticket',
          'create:knowledge_base',
          'read:knowledge_base',
          'update:knowledge_base',
          'delete:knowledge_base',
          'read:support_analytics',
          'create:support_reports',

          // Analytics & BI - to√†n quy·ªÅn
          'admin:analytics',
          'manage:analytics',
          'create:dashboard',
          'read:dashboard',
          'update:dashboard',
          'delete:dashboard',
          'share:dashboard',
          'create:report',
          'read:report',
          'update:report',
          'delete:report',
          'export:report',
          'schedule:report',
          'read:business_intelligence',
          'create:bi_analysis',
          'read:data_warehouse',

          // E-commerce - to√†n quy·ªÅn
          'admin:ecommerce',
          'manage:ecommerce',
          'manage:catalog',
          'read:catalog',
          'create:product_listing',
          'update:product_listing',
          'read:online_order',
          'update:online_order',
          'process:online_order',
          'refund:online_order',
          'manage:website',
          'update:website_settings',
          'manage:payment_gateway',
          'read:ecommerce_analytics',
          'create:ecommerce_reports',

          // Admin specific permissions
          'read:settings',
          'update:settings',
          'manage:system',
          'read:audit_log',
          'export:audit_log',
          'read:security_log',
          'manage:backup',
          'create:backup',
          'restore:backup',
          'manage:integration',
          'configure:api',
          'manage:webhooks',

          // Global permissions
          'create:*',
          'read:*',
          'update:*',
          'delete:*',
          'manage:*',
          'admin:*',
        ]),
      },
      create: {
        name: 'Super Administrator',
        description: 'Qu·∫£n tr·ªã vi√™n c·∫•p cao nh·∫•t - c√≥ to√†n quy·ªÅn h·ªá th·ªëng TazaCore',
        permissions: JSON.stringify([
          'system:admin',
          'system:manage',
          'system:configure',
          'system:backup',
          'create:user',
          'read:user',
          'update:user',
          'delete:user',
          'manage:user',
          'create:role',
          'read:role',
          'update:role',
          'delete:role',
          'manage:role',
          'admin:sales',
          'admin:crm',
          'admin:inventory',
          'admin:finance',
          'admin:hrm',
          'admin:projects',
          'admin:manufacturing',
          'admin:marketing',
          'admin:support',
          'admin:analytics',
          'admin:ecommerce',
          'create:*',
          'read:*',
          'update:*',
          'delete:*',
          'manage:*',
          'admin:*',
        ]),
      },
    });

    console.log('‚úÖ Super Admin Role t·∫°o th√†nh c√¥ng:', superAdminRole.name);

    // 2. T·∫°o Super Admin User
    const hashedPassword = await bcrypt.hash(ADMIN_CONFIG.password, 12);

    // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await prisma.user.findUnique({
      where: { email: ADMIN_CONFIG.email },
    });

    let superAdmin;

    if (existingUser) {
      // C·∫≠p nh·∫≠t user hi·ªán t·∫°i
      superAdmin = await prisma.user.update({
        where: { email: ADMIN_CONFIG.email },
        data: {
          password: hashedPassword,
          displayName: ADMIN_CONFIG.displayName,
          username: ADMIN_CONFIG.username,
          isActive: true,
          isVerified: true,
          roleId: superAdminRole.id,
          avatar:
            'https://ui-avatars.com/api/?name=Super+Admin&background=dc2626&color=fff&size=128',
        },
        include: { role: true },
      });
      console.log('‚úÖ Super Admin User ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:', superAdmin.email);
    } else {
      // T·∫°o user m·ªõi
      superAdmin = await prisma.user.create({
        data: {
          email: ADMIN_CONFIG.email,
          username: ADMIN_CONFIG.username,
          password: hashedPassword,
          displayName: ADMIN_CONFIG.displayName,
          isActive: true,
          isVerified: true,
          roleId: superAdminRole.id,
          avatar:
            'https://ui-avatars.com/api/?name=Super+Admin&background=dc2626&color=fff&size=128',
        },
        include: { role: true },
      });
      console.log('‚úÖ Super Admin User ƒë√£ ƒë∆∞·ª£c t·∫°o:', superAdmin.email);
    }

    // 3. T·∫°o employee record n·∫øu c√≥ b·∫£ng Employee
    try {
      const employeeCreateData = {
        employeeId: `EMP-${Date.now()}`,
        userId: superAdmin.id,
        firstName: 'System',
        lastName: 'Administrator',
        fullName: 'System Administrator',
        email: superAdmin.email,
        hireDate: new Date(),
        isActive: true,
      };

      const employeeUpdateData = {
        employeeId: `EMP-${Date.now()}`,
        firstName: 'System',
        lastName: 'Administrator',
        fullName: 'System Administrator',
        email: superAdmin.email,
        hireDate: new Date(),
        isActive: true,
      };

      await prisma.employee.upsert({
        where: { userId: superAdmin.id },
        update: employeeUpdateData,
        create: employeeCreateData,
      });

      console.log('‚úÖ Employee record ƒë√£ ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t');
    } catch (error) {
      console.log('‚ÑπÔ∏è B·∫£ng Employee kh√¥ng t·ªìn t·∫°i ho·∫∑c c√≥ l·ªói:', error instanceof Error ? error.message : String(error));
    }

    // 4. T·∫°o c√°c role kh√°c n·∫øu ch∆∞a c√≥
    const additionalRoles = [
      {
        name: 'Manager',
        description: 'Qu·∫£n l√Ω c·∫•p trung - c√≥ quy·ªÅn qu·∫£n l√Ω ph√≤ng ban v√† m·ªôt s·ªë module',
        permissions: [
          'read:user',
          'update:user',
          'manage:department',
          'manage:sales',
          'read:sales',
          'create:sales',
          'update:sales',
          'manage:crm',
          'read:crm',
          'create:crm',
          'update:crm',
          'read:inventory',
          'update:inventory',
          'read:finance',
          'read:financial_reports',
          'manage:hrm',
          'read:hrm',
          'create:hrm',
          'update:hrm',
          'manage:projects',
          'read:projects',
          'create:projects',
          'update:projects',
          'read:analytics',
          'read:report',
        ],
      },
      {
        name: 'Employee',
        description: 'Nh√¢n vi√™n - quy·ªÅn truy c·∫≠p c∆° b·∫£n',
        permissions: [
          'read:own_profile',
          'update:own_profile',
          'read:sales',
          'create:sales',
          'update:own_sales',
          'read:crm',
          'create:crm',
          'update:own_crm',
          'read:projects',
          'update:own_tasks',
          'read:ticket',
          'create:ticket',
          'update:own_ticket',
        ],
      },
      {
        name: 'Viewer',
        description: 'Ng∆∞·ªùi xem - ch·ªâ c√≥ quy·ªÅn ƒë·ªçc',
        permissions: [
          'read:own_profile',
          'read:sales',
          'read:crm',
          'read:projects',
          'read:analytics',
        ],
      },
    ];

    for (const roleData of additionalRoles) {
      await prisma.role.upsert({
        where: { name: roleData.name },
        update: {
          description: roleData.description,
          permissions: JSON.stringify(roleData.permissions),
        },
        create: {
          name: roleData.name,
          description: roleData.description,
          permissions: JSON.stringify(roleData.permissions),
        },
      });
    }

    console.log('‚úÖ T·∫•t c·∫£ c√°c role ƒë√£ ƒë∆∞·ª£c t·∫°o/c·∫≠p nh·∫≠t th√†nh c√¥ng');

    // 5. Hi·ªÉn th·ªã th√¥ng tin ƒëƒÉng nh·∫≠p
    console.log('\nüéâ SUPER ADMINISTRATOR ƒê√É ƒê∆Ø·ª¢C T·∫†O TH√ÄNH C√îNG!');
    console.log('='.repeat(60));
    console.log('üìß Email: admin@taza.com');
    console.log('üîë M·∫≠t kh·∫©u: TazaAdmin@2024!');
    console.log('üë§ T√™n hi·ªÉn th·ªã: TazaCore System Administrator');
    console.log('üõ°Ô∏è Vai tr√≤: Super Administrator');
    console.log('üìà C·∫•p ƒë·ªô quy·ªÅn: 10 (Cao nh·∫•t)');
    console.log('üè¢ Tr·∫°ng th√°i: Ho·∫°t ƒë·ªông & ƒê√£ x√°c th·ª±c');
    console.log('='.repeat(60));
    console.log('\n‚ú® B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi th√¥ng tin tr√™n v√† c√≥ to√†n quy·ªÅn h·ªá th·ªëng!');
    console.log('\n‚ö†Ô∏è  L∆ØU √ù B·∫¢O M·∫¨T:');
    console.log('- H√£y ƒë·ªïi m·∫≠t kh·∫©u ngay sau l·∫ßn ƒëƒÉng nh·∫≠p ƒë·∫ßu ti√™n');
    console.log('- Kh√¥ng chia s·∫ª th√¥ng tin ƒëƒÉng nh·∫≠p v·ªõi ng∆∞·ªùi kh√°c');
    console.log('- K√≠ch ho·∫°t x√°c th·ª±c 2 y·∫øu t·ªë n·∫øu c√≥ th·ªÉ');
    console.log('- Theo d√µi logs ho·∫°t ƒë·ªông c·ªßa t√†i kho·∫£n n√†y');

    // 6. Hi·ªÉn th·ªã danh s√°ch quy·ªÅn
    console.log('\nüìã DANH S√ÅCH QUY·ªÄN SUPER ADMINISTRATOR:');
    console.log('üîπ Qu·∫£n l√Ω h·ªá th·ªëng (System Management)');
    console.log('üîπ Qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† ph√¢n quy·ªÅn (User & Role Management)');
    console.log('üîπ Qu·∫£n l√Ω b√°n h√†ng (Sales Management)');
    console.log('üîπ Qu·∫£n l√Ω kh√°ch h√†ng (CRM)');
    console.log('üîπ Qu·∫£n l√Ω kho (Inventory Management)');
    console.log('üîπ Qu·∫£n l√Ω t√†i ch√≠nh (Finance & Accounting)');
    console.log('üîπ Qu·∫£n l√Ω nh√¢n s·ª± (HRM)');
    console.log('üîπ Qu·∫£n l√Ω d·ª± √°n (Project Management)');
    console.log('üîπ Qu·∫£n l√Ω s·∫£n xu·∫•t (Manufacturing)');
    console.log('üîπ Qu·∫£n l√Ω marketing (Marketing)');
    console.log('üîπ H·ªó tr·ª£ kh√°ch h√†ng (Customer Support)');
    console.log('üîπ Ph√¢n t√≠ch & b√°o c√°o (Analytics & BI)');
    console.log('üîπ Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ (E-commerce)');
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o Super Administrator:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y script
if (require.main === module) {
  createSuperAdmin()
    .then(() => {
      console.log('\nüöÄ Script ho√†n th√†nh th√†nh c√¥ng!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Script th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

export default createSuperAdmin;
