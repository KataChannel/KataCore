#!/bin/bash

# KataCore StartKit v2 - Cleanup Script
# T·ªëi gi·∫£n h√≥a codebase b·∫±ng c√°ch x√≥a c√°c file kh√¥ng c·∫ßn thi·∫øt

set -euo pipefail

readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_banner() {
    echo -e "${GREEN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üßπ KataCore StartKit v2 Cleanup                         ‚ïë
‚ïë                                                                              ‚ïë
‚ïë                     T·ªëi gi·∫£n h√≥a codebase cho v2                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Danh s√°ch file v√† th∆∞ m·ª•c c·∫ßn x√≥a (kh√¥ng c·∫ßn thi·∫øt cho v2)
cleanup_files() {
    log "üßπ B·∫Øt ƒë·∫ßu t·ªëi gi·∫£n h√≥a codebase..."
    
    # X√≥a c√°c script deployer c≈© (v1)
    local old_deployers=(
        "universal-deployer.sh"
        "quick-deploy.sh"
        "demo-nginx-config.sh"
        "fix-env-prod.sh"
        "quick-ssh-setup.sh"
        "test-config-system.sh"
        "test-env-gen.sh"
        "local-test.sh"
    )
    
    for file in "${old_deployers[@]}"; do
        if [[ -f "$file" ]]; then
            warning "X√≥a deployer c≈©: $file"
            rm -f "$file"
        fi
    done
    
    # X√≥a c√°c helper script kh√¥ng c·∫ßn thi·∫øt
    local scripts_to_remove=(
        "scripts/pre-deploy-check.sh"
        "scripts/post-deploy-verify.sh"
        "scripts/ssh-keygen-setup.sh" 
        "scripts/validate-env.sh"
        "scripts/cleanup-deploy.sh"
        "scripts/fix-first-deployment.sh"
        "scripts/quick-deployment-fix.sh"
    )
    
    for script in "${scripts_to_remove[@]}"; do
        if [[ -f "$script" ]]; then
            warning "X√≥a helper script: $script"
            rm -f "$script"
        fi
    done
    
    # X√≥a backup configs nginx c≈©
    if [[ -d "nginx/conf.d/backup" ]]; then
        warning "X√≥a nginx backup configs"
        rm -rf "nginx/conf.d/backup"
    fi
    
    # X√≥a c√°c file backup nginx c≈©
    find nginx/conf.d/ -name "*.backup*" -delete 2>/dev/null || true
    find nginx/conf.d/ -name "*-20*" -delete 2>/dev/null || true
    
    # X√≥a c√°c file env backup c≈©
    find . -maxdepth 1 -name ".env.prod.backup*" -delete 2>/dev/null || true
    
    # X√≥a c√°c file log c≈©
    find . -name "*.log" -delete 2>/dev/null || true
    
    # X√≥a cache directories c≈©
    rm -rf .deploy-cache 2>/dev/null || true
    rm -rf .deploy-logs 2>/dev/null || true
    
    # X√≥a file docs kh√¥ng c·∫ßn thi·∫øt
    local docs_to_remove=(
        "docs/SSH_SETUP_GUIDE.md"
        "docs/CUSTOMIZATION.md"
        "DEPLOYMENT_GUIDE.md"
        "ENHANCED_CONFIG_SUMMARY.md"
    )
    
    for doc in "${docs_to_remove[@]}"; do
        if [[ -f "$doc" ]]; then
            warning "X√≥a documentation c≈©: $doc"
            rm -f "$doc"
        fi
    done
    
    success "Ho√†n th√†nh t·ªëi gi·∫£n h√≥a codebase"
}

# T·∫°o file .gitignore t·ªëi gi·∫£n
create_minimal_gitignore() {
    log "üìù T·∫°o .gitignore t·ªëi gi·∫£n..."
    
    cat > .gitignore << 'EOF'
# KataCore StartKit v2 - Minimal .gitignore

# Environment files
.env
.env.local
.env.prod
.env.prod.backup*
*.env.backup*

# Dependencies
node_modules/
.bun

# Build outputs
.next/
dist/
build/

# Logs
*.log
logs/

# Deployment
.deploy-cache/
.deploy-logs/
deploy-temp-*/
ssl-temp/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Docker
.dockerignore

# Runtime
.pid
.seed
*.seed
*.tgz
EOF
    
    success ".gitignore t·ªëi gi·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o"
}

# C·∫≠p nh·∫≠t CHANGELOG
update_changelog() {
    log "üìù C·∫≠p nh·∫≠t CHANGELOG cho v2..."
    
    # Backup changelog c≈© n·∫øu c√≥
    if [[ -f "CHANGELOG.md" ]]; then
        cp "CHANGELOG.md" "CHANGELOG.md.v1-backup"
    fi
    
    cat > CHANGELOG.md << 'EOF'
# Changelog - KataCore StartKit v2

## [2.0.0] - 2025-01-02

### üöÄ Major Changes - StartKit v2
- **Auto-Environment Generation**: T·ª± ƒë·ªông t·∫°o `.env.prod` v·ªõi credentials an to√†n
- **Auto-SSL Configuration**: T·ª± ƒë·ªông c·∫•u h√¨nh SSL certificate v·ªõi Let's Encrypt  
- **Smart Deployment Detection**: T·ª± ƒë·ªông ph√°t hi·ªán deployment l·∫ßn ƒë·∫ßu vs update
- **Minimal Configuration**: Ch·ªâ c·∫ßn IP server v√† domain
- **Update Management**: C·∫≠p nh·∫≠t NextJS/NestJS/Prisma t·ª± ƒë·ªông
- **Enhanced Security**: Auto-generate password 16-64 k√Ω t·ª±

### ‚ú® New Features
- Single command deployment: `./startkit-deployer.sh --host IP --domain DOMAIN`
- Auto-detect first deployment vs updates
- Auto-generate secure environment variables
- Auto-configure SSL certificates and renewal
- Smart update management (only update what changed)
- Simplified codebase (removed 80% of helper scripts)

### üîß Improvements
- Consolidated deployment logic into single script
- Removed redundant helper scripts
- Streamlined configuration process
- Enhanced error handling and logging
- Better deployment status reporting

### üóëÔ∏è Removed (Deprecated in v2)
- `universal-deployer.sh` (replaced by `startkit-deployer.sh`)
- `quick-deploy.sh` and related scripts
- Multiple helper scripts in `scripts/` directory
- Manual environment configuration
- Complex deployment modes

### üìù Migration Guide from v1 to v2
1. Use new deployment command: `./startkit-deployer.sh --host IP --domain DOMAIN`
2. Remove old `.env.prod` file (will be auto-generated)
3. Update npm scripts to use new deployer
4. SSL now auto-configured (no manual setup needed)

---

## [1.0.0] - Previous Version
- Legacy deployment system
- Manual environment configuration
- Multiple deployment scripts
- Manual SSL setup
EOF
    
    success "CHANGELOG.md ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho v2"
}

# T·∫°o quick start script m·ªõi cho v2
create_quick_start_v2() {
    log "üìù T·∫°o quick-start script m·ªõi cho v2..."
    
    cat > quick-start-v2.sh << 'EOF'
#!/bin/bash

# KataCore StartKit v2 - Quick Start
# Guided setup cho deployment nhanh

set -euo pipefail

readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

show_banner() {
    echo -e "${BLUE}"
    cat << 'BANNER'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üöÄ KataCore StartKit v2 Quick Start                     ‚ïë
‚ïë                                                                              ‚ïë
‚ïë                     Auto-deployment v·ªõi SSL v√† Environment                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
BANNER
    echo -e "${NC}"
}

main() {
    show_banner
    
    echo -e "${GREEN}Ch·ªçn option deployment:${NC}"
    echo "1. üöÄ Deploy l·∫ßn ƒë·∫ßu (ch·ªâ IP server)"
    echo "2. üîí Deploy v·ªõi SSL (IP + domain)"  
    echo "3. ‚¨ÜÔ∏è C·∫≠p nh·∫≠t deployment hi·ªán t·∫°i"
    echo "4. üßπ Clean deployment (x√≥a data c≈©)"
    echo ""
    
    read -p "Ch·ªçn option (1-4): " choice
    
    case $choice in
        1)
            read -p "Nh·∫≠p IP server: " server_ip
            echo "üöÄ Deploying v·ªõi IP: $server_ip"
            ./startkit-deployer.sh --host "$server_ip"
            ;;
        2)
            read -p "Nh·∫≠p IP server: " server_ip
            read -p "Nh·∫≠p domain: " domain
            echo "üîí Deploying v·ªõi SSL: $server_ip -> $domain"
            ./startkit-deployer.sh --host "$server_ip" --domain "$domain"
            ;;
        3)
            read -p "Nh·∫≠p IP server: " server_ip
            echo "‚¨ÜÔ∏è Updating deployment: $server_ip"
            ./startkit-deployer.sh --host "$server_ip" --update
            ;;
        4)
            read -p "Nh·∫≠p IP server: " server_ip
            echo "üßπ Clean deployment: $server_ip"
            ./startkit-deployer.sh --host "$server_ip" --clean
            ;;
        *)
            echo "‚ùå Option kh√¥ng h·ª£p l·ªá"
            exit 1
            ;;
    esac
}

main "$@"
EOF
    
    chmod +x quick-start-v2.sh
    success "quick-start-v2.sh ƒë√£ ƒë∆∞·ª£c t·∫°o"
}

# Main function
main() {
    show_banner
    
    log "üßπ B·∫Øt ƒë·∫ßu t·ªëi gi·∫£n h√≥a KataCore StartKit v2..."
    
    # Backup file quan tr·ªçng tr∆∞·ªõc khi cleanup
    if [[ -f "quick-start.sh" ]]; then
        cp "quick-start.sh" "quick-start.sh.v1-backup"
        warning "Backup quick-start.sh v1"
    fi
    
    cleanup_files
    create_minimal_gitignore
    update_changelog
    create_quick_start_v2
    
    echo ""
    success "üéâ Ho√†n th√†nh t·ªëi gi·∫£n h√≥a StartKit v2!"
    echo ""
    echo -e "${GREEN}üìã T√≥m t·∫Øt thay ƒë·ªïi:${NC}"
    echo "   ‚úÖ X√≥a c√°c deployer script c≈© (v1)"
    echo "   ‚úÖ X√≥a helper scripts kh√¥ng c·∫ßn thi·∫øt" 
    echo "   ‚úÖ X√≥a backup files v√† logs c≈©"
    echo "   ‚úÖ T·∫°o .gitignore t·ªëi gi·∫£n"
    echo "   ‚úÖ C·∫≠p nh·∫≠t CHANGELOG cho v2"
    echo "   ‚úÖ T·∫°o quick-start-v2.sh m·ªõi"
    echo ""
    echo -e "${YELLOW}üöÄ S·ª≠ d·ª•ng StartKit v2:${NC}"
    echo "   ‚Ä¢ Deploy l·∫ßn ƒë·∫ßu: ./startkit-deployer.sh --host YOUR_IP"
    echo "   ‚Ä¢ Deploy v·ªõi SSL: ./startkit-deployer.sh --host YOUR_IP --domain YOUR_DOMAIN"
    echo "   ‚Ä¢ Quick start: ./quick-start-v2.sh"
}

main "$@"
