#!/bin/bash

# üöÄ KataCore StartKit v2 - Deploy Guide
# H∆∞·ªõng d·∫´n deploy t·ª´ng b∆∞·ªõc ƒë·ªÉ tr√°nh l·ªói

set -euo pipefail

readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

info() {
    echo -e "${CYAN}‚ÑπÔ∏è  $1${NC}"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

show_banner() {
    echo -e "${BLUE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üìã KataCore StartKit v2 - Deploy Guide                  ‚ïë
‚ïë                                                                              ‚ïë
‚ïë                     H∆∞·ªõng d·∫´n deploy t·ª´ng b∆∞·ªõc tr√°nh l·ªói                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Ki·ªÉm tra prerequisites
check_prerequisites() {
    log "üîç Ki·ªÉm tra prerequisites..."
    
    local missing_tools=()
    
    # Ki·ªÉm tra Bun
    if ! command -v bun >/dev/null 2>&1; then
        missing_tools+=("bun.js")
        error "Bun.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng c√†i t·ª´: https://bun.sh"
    else
        success "Bun.js $(bun --version) ‚úì"
    fi
    
    # Ki·ªÉm tra Git
    if ! command -v git >/dev/null 2>&1; then
        missing_tools+=("git")
        error "Git ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        success "Git ‚úì"
    fi
    
    # Ki·ªÉm tra SSH
    if ! command -v ssh >/dev/null 2>&1; then
        missing_tools+=("ssh")
        error "SSH client ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        success "SSH client ‚úì"
    fi
    
    # Ki·ªÉm tra c√°c file script
    local required_scripts=("startkit-deployer.sh" "quick-start-v2.sh" "scripts/ssh-keygen-setup.sh")
    for script in "${required_scripts[@]}"; do
        if [[ ! -f "$script" ]]; then
            error "Script kh√¥ng t·ªìn t·∫°i: $script"
            exit 1
        elif [[ ! -x "$script" ]]; then
            warning "Script kh√¥ng executable: $script"
            chmod +x "$script"
            success "ƒê√£ fix permission cho: $script"
        else
            success "Script OK: $script ‚úì"
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        error "Thi·∫øu tools: ${missing_tools[*]}"
        exit 1
    fi
}

# Ki·ªÉm tra project structure
check_project_structure() {
    log "üîç Ki·ªÉm tra c·∫•u tr√∫c project..."
    
    local required_dirs=("api" "site" "scripts" "nginx")
    local required_files=("package.json" "docker-compose.prod.yml" "README.md")
    
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            error "Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: $dir"
            exit 1
        else
            success "Th∆∞ m·ª•c OK: $dir ‚úì"
        fi
    done
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            error "File kh√¥ng t·ªìn t·∫°i: $file"
            exit 1
        else
            success "File OK: $file ‚úì"
        fi
    done
}

# Install dependencies
install_dependencies() {
    log "üì¶ C√†i ƒë·∫∑t dependencies..."
    
    info "C√†i ƒë·∫∑t root dependencies..."
    bun install
    
    info "C√†i ƒë·∫∑t API dependencies..."
    cd api && bun install && cd ..
    
    info "C√†i ƒë·∫∑t Site dependencies..."
    cd site && bun install && cd ..
    
    success "Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
}

# H∆∞·ªõng d·∫´n chu·∫©n b·ªã server
show_server_requirements() {
    echo ""
    info "üìã Y√äU C·∫¶U SERVER:"
    echo "   ‚Ä¢ Ubuntu 20.04+ / Debian 11+ / CentOS 8+"
    echo "   ‚Ä¢ RAM: T·ªëi thi·ªÉu 2GB (khuy·∫øn ngh·ªã 4GB+)"
    echo "   ‚Ä¢ Disk: T·ªëi thi·ªÉu 20GB tr·ªëng"
    echo "   ‚Ä¢ CPU: T·ªëi thi·ªÉu 1 core (khuy·∫øn ngh·ªã 2+ cores)"
    echo "   ‚Ä¢ Network: Port 22 (SSH), 80 (HTTP), 443 (HTTPS) m·ªü"
    echo "   ‚Ä¢ Root access ho·∫∑c sudo user"
    echo ""
    
    info "üîê CHU·∫®N B·ªä TH√îNG TIN:"
    echo "   ‚Ä¢ IP address c·ªßa server"
    echo "   ‚Ä¢ SSH username (root ho·∫∑c ubuntu)"
    echo "   ‚Ä¢ SSH password ho·∫∑c private key"
    echo "   ‚Ä¢ Domain name (n·∫øu mu·ªën SSL)"
    echo ""
}

# H∆∞·ªõng d·∫´n deploy
show_deploy_options() {
    echo ""
    info "üöÄ T√ôY CH·ªåN DEPLOY:"
    echo ""
    echo "1Ô∏è‚É£  DEPLOY V·ªöI IP (HTTP) - D√†nh cho test/development"
    echo "   ./startkit-deployer.sh --host YOUR_SERVER_IP"
    echo ""
    echo "2Ô∏è‚É£  DEPLOY V·ªöI DOMAIN + SSL (HTTPS) - D√†nh cho production"
    echo "   ./startkit-deployer.sh --host YOUR_SERVER_IP --domain yourdomain.com"
    echo ""
    echo "3Ô∏è‚É£  DEPLOY INTERACTIVE - Wizard h∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc"
    echo "   ./quick-start-v2.sh"
    echo ""
    echo "4Ô∏è‚É£  C·∫¨P NH·∫¨T DEPLOYMENT HI·ªÜN T·∫†I"
    echo "   ./startkit-deployer.sh --host YOUR_SERVER_IP --update"
    echo ""
    echo "5Ô∏è‚É£  DEPLOY L·∫†I HO√ÄN TO√ÄN (X√ìA DATA C≈®)"
    echo "   ./startkit-deployer.sh --host YOUR_SERVER_IP --clean"
    echo ""
}

# H∆∞·ªõng d·∫´n SSH setup
show_ssh_setup() {
    echo ""
    info "üîë THI·∫æT L·∫¨P SSH KEY (T√πy ch·ªçn nh∆∞ng khuy·∫øn ngh·ªã):"
    echo ""
    echo "‚Ä¢ T·∫°o SSH key cho root user:"
    echo "  ./scripts/ssh-keygen-setup.sh --host YOUR_SERVER_IP --user root"
    echo ""
    echo "‚Ä¢ T·∫°o SSH key cho ubuntu user:"
    echo "  ./scripts/ssh-keygen-setup.sh --host YOUR_SERVER_IP --user ubuntu"
    echo ""
    echo "‚Ä¢ T·∫°o SSH key v·ªõi port custom:"
    echo "  ./scripts/ssh-keygen-setup.sh --host YOUR_SERVER_IP --user ubuntu --port 2222"
    echo ""
    echo "‚Ä¢ Xem t·∫•t c·∫£ options:"
    echo "  ./scripts/ssh-keygen-setup.sh --help"
    echo ""
}

# Troubleshooting
show_troubleshooting() {
    echo ""
    warning "üîß X·ª¨ L√ù L·ªñI TH∆Ø·ªúNG G·∫∂P:"
    echo ""
    echo "‚ùå SSH Connection refused:"
    echo "   ‚Ä¢ Ki·ªÉm tra IP address ƒë√∫ng ch∆∞a"
    echo "   ‚Ä¢ Ki·ªÉm tra port SSH (th∆∞·ªùng l√† 22)"
    echo "   ‚Ä¢ Ki·ªÉm tra firewall server c√≥ m·ªü port SSH"
    echo ""
    echo "‚ùå Permission denied:"
    echo "   ‚Ä¢ Ki·ªÉm tra username (root/ubuntu)"
    echo "   ‚Ä¢ Ki·ªÉm tra password ho·∫∑c SSH key"
    echo "   ‚Ä¢ Th·ª≠ t·∫°o SSH key m·ªõi"
    echo ""
    echo "‚ùå Docker installation failed:"
    echo "   ‚Ä¢ Server c√≥ internet connection kh√¥ng"
    echo "   ‚Ä¢ User c√≥ sudo permission kh√¥ng"
    echo "   ‚Ä¢ Th·ª≠ ch·∫°y l·∫°i v·ªõi --verbose ƒë·ªÉ xem log chi ti·∫øt"
    echo ""
    echo "‚ùå SSL certificate failed:"
    echo "   ‚Ä¢ Domain ƒë√£ point v·ªÅ IP server ch∆∞a"
    echo "   ‚Ä¢ DNS propagation c√≥ ho√†n th√†nh ch∆∞a (check: dig yourdomain.com)"
    echo "   ‚Ä¢ Port 80 v√† 443 c√≥ m·ªü kh√¥ng"
    echo ""
    echo "‚ùå Application kh√¥ng start:"
    echo "   ‚Ä¢ Ki·ªÉm tra RAM server ƒë·ªß kh√¥ng (t·ªëi thi·ªÉu 2GB)"
    echo "   ‚Ä¢ Ki·ªÉm tra disk space ƒë·ªß kh√¥ng"
    echo "   ‚Ä¢ Xem log: docker-compose logs -f"
    echo ""
}

# Interactive deployment
interactive_deploy() {
    echo ""
    log "üöÄ B·∫Øt ƒë·∫ßu deploy interactive..."
    
    # Thu th·∫≠p th√¥ng tin
    read -p "Nh·∫≠p IP address server: " server_ip
    if [[ -z "$server_ip" ]]; then
        error "IP address l√† b·∫Øt bu·ªôc!"
        exit 1
    fi
    
    read -p "Nh·∫≠p username SSH (root/ubuntu) [root]: " ssh_user
    ssh_user=${ssh_user:-root}
    
    read -p "Nh·∫≠p port SSH [22]: " ssh_port
    ssh_port=${ssh_port:-22}
    
    read -p "C√≥ mu·ªën setup SSL v·ªõi domain kh√¥ng? (y/N): " setup_ssl
    
    domain=""
    if [[ "$setup_ssl" =~ ^[Yy]$ ]]; then
        read -p "Nh·∫≠p domain name: " domain
        if [[ -z "$domain" ]]; then
            warning "Kh√¥ng c√≥ domain, s·∫Ω deploy v·ªõi HTTP"
        fi
    fi
    
    # X√°c nh·∫≠n th√¥ng tin
    echo ""
    info "üìã X√ÅC NH·∫¨N TH√îNG TIN DEPLOY:"
    echo "   üñ•Ô∏è  Server: $ssh_user@$server_ip:$ssh_port"
    if [[ -n "$domain" ]]; then
        echo "   üåê Domain: $domain (HTTPS)"
    else
        echo "   üåê Protocol: HTTP (ch·ªâ IP)"
    fi
    echo ""
    
    read -p "X√°c nh·∫≠n deploy v·ªõi th√¥ng tin tr√™n? (y/N): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        warning "Deploy b·ªã h·ªßy b·ªüi user"
        exit 0
    fi
    
    # Th·ª±c hi·ªán deploy
    echo ""
    log "üöÄ B·∫Øt ƒë·∫ßu deploy..."
    
    if [[ -n "$domain" ]]; then
        info "Deploying v·ªõi SSL..."
        ./startkit-deployer.sh --host "$server_ip" --user "$ssh_user" --port "$ssh_port" --domain "$domain" --verbose
    else
        info "Deploying v·ªõi HTTP..."
        ./startkit-deployer.sh --host "$server_ip" --user "$ssh_user" --port "$ssh_port" --verbose
    fi
}

# Quick commands
show_quick_commands() {
    echo ""
    info "‚ö° QUICK COMMANDS:"
    echo ""
    echo "üî• Deploy nhanh v·ªõi IP:"
    echo "   ./startkit-deployer.sh --host IP_ADDRESS"
    echo ""
    echo "üîí Deploy nhanh v·ªõi SSL:"
    echo "   ./startkit-deployer.sh --host IP_ADDRESS --domain YOUR_DOMAIN"
    echo ""
    echo "‚¨ÜÔ∏è Update deployment:"
    echo "   ./startkit-deployer.sh --host IP_ADDRESS --update"
    echo ""
    echo "üßπ Clean deploy:"
    echo "   ./startkit-deployer.sh --host IP_ADDRESS --clean"
    echo ""
    echo "üéØ Interactive wizard:"
    echo "   ./quick-start-v2.sh"
    echo ""
    echo "üîë Setup SSH key:"
    echo "   ./scripts/ssh-keygen-setup.sh --host IP_ADDRESS"
    echo ""
}

# Main menu
main() {
    show_banner
    
    echo ""
    info "Ch·ªçn h√†nh ƒë·ªông:"
    echo "1. üîç Ki·ªÉm tra prerequisites v√† project"
    echo "2. üì¶ C√†i ƒë·∫∑t dependencies"
    echo "3. üìã Xem y√™u c·∫ßu server v√† h∆∞·ªõng d·∫´n"
    echo "4. üöÄ Deploy interactive (khuy·∫øn ngh·ªã)"
    echo "5. ‚ö° Xem quick commands"
    echo "6. üîß Xem troubleshooting"
    echo "7. ‚ùå Tho√°t"
    echo ""
    
    read -p "Ch·ªçn option (1-7): " choice
    
    case $choice in
        1)
            check_prerequisites
            check_project_structure
            success "‚úÖ Project s·∫µn s√†ng deploy!"
            ;;
        2)
            install_dependencies
            ;;
        3)
            show_server_requirements
            show_deploy_options
            show_ssh_setup
            ;;
        4)
            check_prerequisites
            interactive_deploy
            ;;
        5)
            show_quick_commands
            ;;
        6)
            show_troubleshooting
            ;;
        7)
            info "Tho√°t ch∆∞∆°ng tr√¨nh"
            exit 0
            ;;
        *)
            error "Option kh√¥ng h·ª£p l·ªá"
            exit 1
            ;;
    esac
}

main "$@"
